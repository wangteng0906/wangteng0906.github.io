<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VictoriaMetrics存储机制</title>
      <link href="/post/008.html"/>
      <url>/post/008.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-整体架构"><a href="#1-整体架构" class="headerlink" title="1.整体架构"></a>1.整体架构</h3><p>VictoriaMetrics的集群主要由vmstorage、vminsert、vmselect等三部分组成，其中，vmstorage 负责提供数据存储服务; vminsert 是数据存储 vmstorage 的代理，使用一致性hash算法进行写入分片； vmselect 负责数据查询，根据输入的查询条件从 vmstorage 中查询数据。</p><p>VictoriaMetrics的这个三个组件每个组件都可以单独进行扩展，并运行在大多数合适软件上。vmstorage采用shared-nothing架构，优点是 vmstorage的节点相互之间无感知，相互之间无需通信，不共享任何数据，增加了集群的可用性、简化了集群的运维和集群的扩展。<br><img src="https://image.wangteng.space/image/202408291002855.png"></p><p>另外，VictoriaMetrics集群支持多个隔离的租户特性，又名命名空间。租户通过accountID (或者accountID:projectID) 来标识，这些ID放在请求URL中。有关VictoriaMetrics租户的一些事实：</p><ul><li>每个accountID和projectID由[0 .. 2 ^ 32）范围内的任意32位整数标识。如果缺少projectID，则会将其自动分配为0。预计有关租户的其他信息（例如身份验证令牌，租户名称，限制，计费等）将存储在单独的关系数据库中。此数据库必须由位于VictoriaMetrics群集前面的单独服务（例如vmauth）管理。</li><li>将第一个数据点写入给定租户时，将自动创建租户。</li><li>所有租户的数据平均分布在可用的vmstorage节点之间。当不同的租户具有不同的数据量和不同的查询负载时，这可以保证在vmstorage节点之间平均负载。</li></ul><p>整体上来说，VictoriaMetrics支持多租户，但租户的信息需要使用额外的关系型数据库来存储，且VictoriaMetrics不支持在单个请求中查询多个租户。</p><h3 id="2-数据模型"><a href="#2-数据模型" class="headerlink" title="2.数据模型"></a>2.数据模型</h3><p>开门见山，<strong>VictoriaMetrics采用的数据模型是单值模型，且只支持浮点数指标</strong>。那么到底什么是单值模型呢？目前，常见的时序数据库的数据模型，主要分成单值模型和多值模型。这里简单说明下单值模型和多值模型，整体上，可以认为单值模型是多值模型的一个特例。</p><p>单值模型是根据<strong>业务指标数据</strong>建模，按照单个指标的细粒度进行数据使用和逻辑存储，如下图所示，一行数据只有一个指标值，即value列。目前采用单值模型的时序数据库，有OpenTSDB、 KairosDB、Prometheus等。<br><img src="https://image.wangteng.space/image/202408291034984.webp"><br>多值的模型则是针对<strong>数据源</strong>建模，我们每一行数据针对的是一个数据源，它的被测量的多个指标在同一列上，如下图所示，一行数据有多个指标值，即有cpu和io两列。目前采用多值模型的时序数据库，有InfluxDB、TimescaleDB等。<br><img src="https://image.wangteng.space/image/202408291035496.webp"></p><h3 id="3-磁盘目录"><a href="#3-磁盘目录" class="headerlink" title="3.磁盘目录"></a>3.磁盘目录</h3><p>VictoriaMetrics的根目录下主要包括4个目录或文件，如下图所示。其中，最主要的是数据目录data和索引目录indexdb，flock.lock文件为文件锁文件，用于VictoriaMetrics进程锁住文件，不允许别的进程进行修改目录或文件。<br><img src="https://image.wangteng.space/image/202408291038344.png"></p><h2 id="3-1数据目录"><a href="#3-1数据目录" class="headerlink" title="3.1数据目录"></a>3.1数据目录</h2><p>数据目录data的具体结构，如下图所示，在图中使用红色文字，对主要目录或文件做了简单说明，其中最主要的是<strong>big</strong>目录和<strong>small</strong>目录，这两个目录的结构是一样的。其中，在VictoriaMetrics中，使用table来表示的数据或者索引的根目录，而实际上VictoriaMetrics中没有实际的表table级别目录。<br><img src="https://image.wangteng.space/image/202408291039818.webp"></p><p>在small目录下，以月为单位不断生成partition目录，比如上图中的2020_11目录，对应的实现在源码lib&#x2F;storage&#x2F;partition.go中。partition目录包括part目录、临时目录tmp、 事务目录txn等三个目录。</p><p>内存中的数据每刷盘一次就会生成一个part目录，如上图中的”708_354_20201103102134.255_20201103102149.255_1643F83394CA24A7”，目录名中的708表示这个目录下包含的数据行数rowsCount, 目录名中的354表示这个目录中包含的数据块数blocksCount, 20201103102134.255表示目录中包含的数据的最小时间戳，20201103102149.255表示目录中包含的数据的最大时间戳，1643F83394CA24A7是生成这个目录时的系统纳秒时间戳的16进制表示，对应的实现逻辑在源码lib&#x2F;storage&#x2F;part.go中；</p><p>1.为何要分成big和small目录, 或者说big目录和small中的数据关系是什么？</p><p>在VictoriaMetrics中，small目录和big目录都会周期性检查，是否需要做part的合并。VictoriaMetrics默认每个10ms检查一次partition目录下的part是否需要做merge。如果检查出有满足merge条件的parts，则这些parts合并为一个part。如果没有满足条件的part进行merge，则以10ms为基进行指数休眠，最大休眠时间为10s。</p><p>VictoriaMetrics在写数据时，先写入在small目录下的相应partition目录下面的，small目录下的每个partition最多256个part。VictoriaMetrics在Compaction时，默认一次最多合并15个part，且small目录下的part最多包含1000W行数据，即1000W个数据点。因此，当一次待合并的parts中包含的行数超过1000W行时，其合并的输出路径为big目录下的同名partition目录下。</p><p>因此，big目录下的数据由small目录下的数据在后台compaction时合并生成的。</p><p>2.为什么要分成big目录和small目录呢？</p><p>这个主要是从磁盘空间占用上来考虑的。时序数据经常读取最近写入的数据，较少读历史数据。而且，时序数据的数据量比较大，通常会使用压缩算法进行压缩。</p><p>数据进行压缩后，读取时需要解压，采用不同级别的压缩压缩算法其解压速度不一样，通常压缩级别越高，其解压速度越慢。在VictoriaMetrics在时序压缩的基础上，又采用了ZSTD这个通用压缩算法进一步压缩了数据，以提高压缩率。在small目录中的part数据，采用的是低级别的ZSTD，而big目录下的数据，采用的是高级别的ZSTD。</p><p>因此，VictoriaMetrics分成small目录和big目录，主要是兼顾近期数据的读取和历史数据的压缩率。</p><h2 id="3-2索引目录"><a href="#3-2索引目录" class="headerlink" title="3.2索引目录"></a>3.2索引目录</h2><p>索引目录indexdb的具体结构，如下图所示，在图中使用红色文字，对主要目录或文件做了简单说明。与数据目录不同的是，indexdb目录下由多个table目录，每个table目录代表一个完整的自治的索引，每个table目录下，又有多个不同的part目录，part命名方式比较简单，有文件包含的item数itemsCount和block数blocksCount, 以及根据系统纳秒时间戳自增生成的mergeIdx的16进制表示。<br><img src="https://image.wangteng.space/image/202408291044947.webp"><br>indexdb下面的形如”1643F4F397B53DEE”是怎么生成的，或者什么时候切换新的目录写索引的呢？VictoriaMetrics会根据用户设置的数据保留周期retention来定期滚动索引目录，当前一个索引目录的保留时间到了，就会切换一个新的目录，重新生成索引。</p><h3 id="4-文件格式"><a href="#4-文件格式" class="headerlink" title="4. 文件格式"></a>4. 文件格式</h3><p>在介绍具体的文件格式之前，不得不提下VictoriaMetrics对于写入数据的处理过程。下图是VictoriaMetrics支持的Prometheus协议的一个写入示例。<br><img src="https://image.wangteng.space/image/202408291046519.webp"><br>VictoriaMetrics在接受到写入请求时，会对请求中包含的时序数据做转换处理，如下图所示。首先先根据包含metric和labels的MetricName生成一个唯一标识TSID，然后metric + labels + TSID作为索引index， TSID + timestamp + value作为数据data，最后索引index和数据data分别进行存储和检索。<br><img src="https://image.wangteng.space/image/202408291049820.webp"></p><p>因此，VictoriaMetrics的数据整体上分成索引和数据两个部分，因此文件格式整体上会有两个部分。其中，索引部分主要是用于支持按照label或者tag进行多维检索。与大多数时序数据库的数据组织方式一样，比如InfluxDB、Prometheus、OpenTSDB等，VictoriaMetrics也是按时间线来组织数据的，即数据存储时，先将数据按TSID进行分组，然后每个TSID的包含的数据点各自使用列式压缩存储。</p><h2 id="4-1-索引文件"><a href="#4-1-索引文件" class="headerlink" title="4.1 索引文件"></a>4.1 索引文件</h2><p>VictoriaMetrics每次内存Flush或者后台Merge时生成的索引part，主要包含metaindex.bin、index.bin、lens.bin、items.bin等4个文件。这四个文件的关系如下图所示, metaindex.bin文件通过metaindex_row索引index.bin文件，index.bin文件通过indexBlock中的blockHeader同时索引lens.bin文件和items.bin文件。<br><img src="https://image.wangteng.space/image/202408291051537.webp"></p><p>metaindex.bin文件中，包含一系列的metaindex_row， 每个metaindex_row中包含最小项firstItem、索引块包含的块头部数blockHeadersCount、索引块偏移indexBlockOffset、索引块大小indexBlockSize。</p><ul><li>metaindex_row在文件中的位置按照firstItem的大小的字典序排序存储，以支持二分检索；</li><li>metaindex.bin文件使用ZSTD进行压缩；</li><li>metaindex.bin文件中的内容在part打开时，会全部读出加载至内存中，以加速查询过滤；</li><li>metaindex_row包含的firstItem为其索引的IndexBlock中所有blockHeader中的字典序最小的firstItem；</li><li>查找时根据firstItem进行二分检索；</li></ul><p>index.bin文件中，包含一系列的indexBlock, 每个indexBlock又包含一系列blockHeader，每个blockHeader的包含item的公共前缀commonPrefix、最小项firstItem、itemsData的序列化类型marshalType、itemsData包含的item数、item块的偏移itemsBlockOffset等内容。</p><ul><li>每个indexBlock使用ZSTD压缩算法进行压缩；</li><li>在indexBlock中查找时，根据firstItem进行二分检索blockHeader；</li></ul><p>items.bin文件中，包含一系列的itemsData, 每个itemsData又包含一系列的item。</p><ul><li>itemsData会根据情况是否使用ZTSD压缩，当item个数小于2时，或者itemsData的长度小于64字节时，不压缩；当itemsData使用ZSTD压缩后的大小，大于原始itemsData的0.9倍时，则不压缩，否则使用ZSTD算法进行压缩。</li><li>每个item在存储时，去掉了blockHeader中的公共前缀commonPrefix以提高压缩率。</li></ul><p>lens.bin文件中，包含一系列的lensData, 每个lensData又包含一系列8字节的长度len， 长度len标识items.bin文件中对应item的长度。在读取或者需要解析itemsData中的item时，先要读取对应的lensData中对应的长度len。 当itemsData进行压缩时，lensData会先使用异或算法进行压缩，然后再使用ZSTD算法进一步压缩。</p><p>VictoriaMetrics索引文件都是围绕着item来组织的，那么item的结构是什么样子的？或者item的种类有哪些？ 在VictoriaMetrics中item的整体上是一个KeyValue结构的字节数组，共计有7种类型，每种类型的item通过固定前缀来区分，前缀类型如下图所示。<br><img src="https://image.wangteng.space/image/202408291052206.webp"><br>VictoriaMetrics是怎么基于item支持tag多维检索的呢？ 这里就不得不提下VictoriaMetrics的TSID的生成过程。</p><p>VictoriaMetrics的MetricName的结构如下所示，包含MetricGroup字节数组和Tag数组，其中，MetricGroup是可选的，每个Tag由Key和Value等字节数组构成。<br><img src="https://image.wangteng.space/image/202408291057528.webp"></p><p>VictoriaMetrics的TSID的结构如下所示，包含MetricGroupID，JobID，InstanceID，MetricID等四个字段，其中除了MetricID外，其他三个字段都是可选的。这个几个ID的生成方法如下：</p><ul><li>metricGroupID根据MetricName中的MetricGroup使用xxhash的sum64算法生成。</li><li>JobID和InstanceID分别由MetricName中的tag的第一个tag和第二个tag使用xxhash的sum64算法生成。为什么使用第一个tag和第二个tag？这是因为VictoriaMetrics在写入时，将写入请求中的JobID和InstanceID放在了Tag数组的第一个和第二个位置。</li><li>MetricID，使用VictoriaMetrics进程启动时的系统纳秒时间戳自增生成。<br><img src="https://image.wangteng.space/image/202408291057433.webp"></li></ul><p>因为TSID中除了MetricID外，其他字段都是可选的，因此TSID中可以始终作为有效信息的只有metricID，因此VictoriaMetrics的在构建tag到TSID的字典过程中，是直接存储的tag到metricID的字典。</p><p>以写入http_requests_total{status&#x3D;”200”, method&#x3D;”GET”}为例，则MetricName为http_requests_total{status&#x3D;”200”, method&#x3D;”GET”}， 假设生成的TSID为{metricGroupID&#x3D;0, jobID&#x3D;0, instanceID&#x3D;0, metricID&#x3D;51106185174286}，则VictoriaMetrics在写入时就构建了如下几种类型的索引item，其他类型的索引item是在后台或者查询时构建的。</p><ul><li>metricName -&gt; TSID, 即http_requests_total{status&#x3D;”200”, method&#x3D;”GET”} -&gt; {metricGroupID&#x3D;0, jobID&#x3D;0, instanceID&#x3D;0, metricID&#x3D;51106185174286}</li><li>metricID -&gt; metricName，即51106185174286 -&gt; http_requests_total{status&#x3D;”200”, method&#x3D;”GET”}</li><li>metricID -&gt; TSID，即51106185174286 -&gt; {metricGroupID&#x3D;0, jobID&#x3D;0, instanceID&#x3D;0, metricID&#x3D;51106185174286}</li><li>tag -&gt; metricID，即 status&#x3D;”200” -&gt; 51106185174286, method&#x3D;”GET” -&gt; 51106185174286, “” &#x3D; http_requests_total -&gt; 51106185174286<br>有了这些索引的item后，就可以支持基于tag的多维检索了，在当给定查询条件http_requests_total{status&#x3D;”200”}时，VictoriaMetrics先根据给定的tag条件，找出每个tag的metricID列表，然后求所有tag的metricID列表的交集，然后根据交集中的metricID，再到索引文件中检索出TSID，根据TSID就可以到数据文件中查询数据了，在返回结果之前，再根据TSID中的metricID，到索引文件中检索出对应的写入时的原始MetircName。</li></ul><p>但是由于VictoriaMetrics的tag到metricID的字典，没有将相同tag的所有metricID放在一起存储，在检索时，一个tag可能需要查询多次才能得到完整的metricID列表。另外查询出metricID后，还要再到索引文件中去检索TSID才能去数据文件查询数据，又增加了一次IO开销。这样来看的话，VictoriaMetrics的索引文件在检索时，如果命中的时间线比较多的情况下，其IO开销会比较大，查询延迟也会比较高。</p><h2 id="4-2-数据文件"><a href="#4-2-数据文件" class="headerlink" title="4.2 数据文件"></a>4.2 数据文件</h2><p>VictoriaMetrics每次内存Flush或者后台Merge时生成的数据part，包含metaindex.bin、index.bin、timestamps.bin、values.bin等4个文件。这四个文件的关系如下所示。metaindex.bin文件索引index.bin文件，index.bin文件同时索引timestamps.bin和values.bin文件。<br><img src="https://image.wangteng.space/image/202408291059126.webp"><br>metaindex.bin文件中，包含一系列的metaindex_row， 每个metaindex_row中包含时间线标识TSID、最小时间戳minTimestamp、最大时间戳maxTimestamp、索引块偏移indexBlockOffset、索引块大小indexBlockSize、索引块包含的块头部数blockHeadersCount。</p><ul><li>metaindex_row在文件中的位置按照TSID的大小的字典序排序存储；</li><li>metaindex.bin文件使用ZSTD进行压缩；</li><li>metaindex.bin文件中的内容在part打开时，会全部读出加载至内存中，以加速查询过滤；</li><li>metaindex_row包含时间线标识TSID为其索引的IndexBlock中所有blockHeader中的最小时间标识TSID；</li><li>metaindex_row包含最小时间戳minTimestamp为其索引的IndexBlock中所有blockHeader中的最小时间戳minTimestamp；</li><li>metaindex_row包含最大时间戳maxTimestamp为其索引的IndexBlock中所有blockHeader中的最大时间戳maxTimestamp；</li><li>查找时根据TSID进行二分检索；</li></ul><p>index.bin文件中，包含一系列的indexBlock, 每个indexBlock又包含一系列blockHeader，每个blockHeader的包含时间线标识TSID、最小时间戳minTimestamp、最大时间戳maxTimestamp、第一个指标值firstValue、时间戳数据块偏移timestampsBlockOffset、指标值数据块偏移valuesBlockOffset等内容。</p><ul><li>每个indexBlock使用ZSTD压缩算法进行压缩；</li><li>查找时，线性遍历blockHeader查找TSID；</li></ul><p>timestamps.bin文件中，包含一系列时间线的时间戳压缩块timestampsData; values.bin文件中，包含的一系列时间线的指标值压缩块valuesData。 其中，timestampsData和values.data会根据时序数据特征进行压缩，整体上的压缩思路是：先做时序压缩，然后在做通用压缩。比如，先做delta-of-delta计算或者异或计算，然后根据情况做zig-zag，最后再根据情况做一次ZSTD压缩，VictoriaMetrics支持的压缩算法或者类型主要有6种，如下图所示，压缩编码源码在lib&#x2F;encoding&#x2F;encoding.go文件中。<br><img src="https://image.wangteng.space/image/202408291100225.webp"></p><p>VictoriaMetrics文档中提及在生产环境中，每个数据点（8字节时间戳 + 8字节value共计16字节）压缩后小于1个字节，最高可达 0.4字节，如下所示。<br><img src="https://image.wangteng.space/image/202408291100828.webp"></p><h3 id="5-VictoriaMetrics总结"><a href="#5-VictoriaMetrics总结" class="headerlink" title="5. VictoriaMetrics总结"></a>5. VictoriaMetrics总结</h3><p>VictoriaMetrics的整体的存储设计还是不错的，比如数据时间分区、数据压缩率高、丰富的生态协议等。但VictoriaMetrics的标签索引、数据可靠性、支持的数据类型等方面还存在一些不足。比如，标签索引查询多次IO，可能在时间线数量非常多的场景下，其检索效率会比较低，且没有WAL，在写入时可能会存在数据丢失的风险。目前只支持浮点数类型，不支持布尔、字符串、字节数组等类型。</p><p>为数不多介绍VictoriaMetrics机制原理的文章，保留进行学习。<br>转自<a href="https://zhuanlan.zhihu.com/p/368912946">https://zhuanlan.zhihu.com/p/368912946</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VictoriaMetrics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pulsar的消息保留和过期策略</title>
      <link href="/post/007.html"/>
      <url>/post/007.html</url>
      
        <content type="html"><![CDATA[<p>导读</p><p>Apache Pulsar 是 Apache 软件基金会顶级项目，是下一代云原生分布式消息流平台，集消息、存储、轻量化函数式计算为一体，采用计算与存储分离架构设计，支持多租户、持久化存储、多机房跨区域数据复制，具有强一致性、高吞吐、低延时及高可扩展性等流数据存储特性。</p><p>默认情况下，Pulsar Broker 会对消息做如下处理：</p><ul><li>列表项当消息被 Consumer 确认之后，会立即执行删除操作。</li><li>对于未被确认的消息会存储到 backlog 中。</li></ul><p>但是，很多线上的生产环境下，这种默认行为并不能满足我们的生产需求，所以，Pulsar 提供了如下配置策略来覆盖这些行为：</p><ul><li>Retention 策略：用户可以将 Consumer 已经确认的消息保留下来。</li><li>TTL 策略：对于未确认的消息，用户可以通过设置 TTL 来使未确认的消息到达已经确认的状态。</li></ul><mark class="hl-label blue">上述两种策略的设置都是在NameSpace的级别进行设置</mark> <h2 id="Retention-策略"><a href="#Retention-策略" class="headerlink" title="Retention 策略"></a>Retention 策略</h2><p>Retention 策略的设置提供了两种方式：</p><ul><li>消息的大小，默认值：defaultRetentionSizeInMB&#x3D;0</li><li>消息被保存的时间，默认值：defaultRetentionTimeInMinutes&#x3D;0</li></ul><p>我们可以在 broker.conf 中对这两项内容进行配置也可以通过命令行的形式。上文提到过，这两种策略的设置，都是在 NameSpace 的级别进行设置，所以当我们使用命令行配置时，使用 NameSpaces 来进行配置，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/pulsar-admin --admin-url http://*.*.*.*:8080 namespaces set-retention b2d/2024-7 --size -1 --time 1h</span><br><span class="line">The following options are required: --size, -s --time, -t</span><br><span class="line">Set the retention policy <span class="keyword">for</span> a namespaceUsage: set-retention [options] tenant/namespace  Options:  * --size, -s       Retention size <span class="built_in">limit</span> (eg: 10M, 16G, 3T). 0 or less than 1MB means no       retention and -1 means infinite size retention  * --time, -t       Retention time <span class="keyword">in</span> minutes (or minutes, hours, days, weeks eg: 100m, 3h, 2d,       5w). 0 means no retention and -1 means infinite time retention</span><br></pre></td></tr></table></figure><p>如上所示：我们可以通过 -s 或者 -t 来指定我们需要配置的大小或者时间。</p><p>当你设置 Retention 策略之后，可以通过如下命令来查看具体的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin/pulsar-admin --admin-url http://*.*.*.*:8080 namespaces get-retention b2d/2024-7</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;retentionTimeInMinutes&quot;</span> : 60,</span><br><span class="line">  <span class="string">&quot;retentionSizeInMB&quot;</span> : -1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Backlog"><a href="#Backlog" class="headerlink" title="Backlog"></a>Backlog</h2><p>backlog 是未被确认消息的集合，它有一个大前提是，这些消息所在的 Topic 是被 Broker 所持久化的，在默认情况下，用户创建的 Topic 都会被持久化。换句话说，Pulsar Broker 会将所有未确认或者未处理的消息都存放到 backlog 中。</p><p>同样的，我们可以在 NameSpace 级别对 backlog 的大小进行配置。需要注意的是，对 backlog 进行配置时，我们需要明确以下两点：</p><ul><li>在当前的 NameSpace 下，每一个 Topic 允许的大小是多少</li><li>如果超过设定的 backlog 的阈值，将会执行哪些操作</li></ul><p>当超过设定的 backlog 的阈值，Pulsar 提供了以下三种策略供用户选择：<br><img src="https://cdn.jsdelivr.net/gh/wangteng0906/picture/img/202407191131894.png"><br>你可以通过 set-backlog-quota 在 NameSpace 级别对 backlog 进行配置，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./bin/pulsar-admin namespaces set-backlog-quota </span></span><br><span class="line">The following options are required: -l, --<span class="built_in">limit</span> -p, --policy</span><br><span class="line">Set a backlog quota policy <span class="keyword">for</span> a namespaceUsage: set-backlog-quota [options] tenant/namespace  Options:  * -l, --<span class="built_in">limit</span>       Size <span class="built_in">limit</span> (eg: 10M, 16G)  * -p, --policy       Retention policy to enforce when the <span class="built_in">limit</span> is reached. Valid options are:       [producer_request_hold, producer_exception, consumer_backlog_eviction]</span><br></pre></td></tr></table></figure><p>如上所示，set-backlog-quota 提供了两个参数，-l 用来指定你设置 backlog 的大小，-p 用来指定，当超过你设置的 backlog 的阈值之后，Broker 将会执行的策略。</p><p>当你设置 backlog 之后，可以通过如下命令，查看相应的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bin/pulsar-admin --admin-url http://*:8080 namespaces get-backlog-quotas b2d/2024-7</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;destination_storage&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;limit&quot;</span> : 1073741824000,</span><br><span class="line">    <span class="string">&quot;policy&quot;</span> : <span class="string">&quot;consumer_backlog_eviction&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你期望取消 backlog 的配置，可以使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pulsar-admin namespaces remove-backlog-quota [your tenant]/[your namespace]</span><br></pre></td></tr></table></figure><div class="note warning disabled"><p>当有消息积压时，你可以通过 clear-backlog 来清除积压的消息。清除 backlog 中积压的消息是相对危险的操作，所以系统会提示你，是否确认要删除 backlog 中的消息， clear-backlog 提供了 -f(–force) 的参数来屏蔽该提示。</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pulsar-admin namespaces clear-backlog [your tenant]/[your namespace]</span><br></pre></td></tr></table></figure><h2 id="Time-To-Live-（TTL）"><a href="#Time-To-Live-（TTL）" class="headerlink" title="Time To Live （TTL）"></a>Time To Live （TTL）</h2><p>默认情况下，Pulsar 会持久化所有未被确认的消息。如果未被确认的消息有很多，这种策略会造成大量的消息被积压，导致磁盘空间增大。有些场景下，消息并不需要被持久化，用户更期望的行为是，将这些未被确认的消息直接丢弃。这种情况下，你可以通过设置 TTL 使得未被确认的消息进入到被确认的状态，当超过设定的 TTL 时间之后，配合相应的 Retention 策略将消息丢弃。</p><p>TTL 的一个典型使用场景是，当 Consumer 由于某些原因出现故障，不能正常消费消息，这时 Producer 还在不断的往 Topic 中生产消息，会造成 Topic 中有大量的未确认的消息出现，这时你可以通过设置 TTL 将这些未确认的消息变为已确认的状态。</p><p>同样的，你可以在 Namesapce 级别下，通过指定 set-message-ttl 对 TTL 进行设置，具体命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@/pulsar<span class="comment"># ./bin/pulsar-admin namespaces set-message-ttl</span></span><br><span class="line">The following option is required: --messageTTL, -ttl</span><br><span class="line">Set Message TTL <span class="keyword">for</span> a namespaceUsage: set-message-ttl [options] tenant/namespace  Options:  * --messageTTL, -ttl       Message TTL <span class="keyword">in</span> seconds       Default: 0</span><br></pre></td></tr></table></figure><p>如上所示，set-message-ttl 只有一个参数 -ttl，单位为秒，默认值为 0。</p><p>当你设置 TTL 策略之后，可以通过 get-message-ttl 查看相应的配置信息，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/pulsar-admin --admin-url http://*.*.*.*:8080 namespaces get-message-ttl b2d/2024-7</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="TTL、Backlog-与-Retention-的区别和联系"><a href="#TTL、Backlog-与-Retention-的区别和联系" class="headerlink" title="TTL、Backlog 与 Retention 的区别和联系"></a>TTL、Backlog 与 Retention 的区别和联系</h2><p>在上述的描述过程中，可以发现，TTL 只去处理一件事情，<mark class="hl-label blue">将未被确认的消息变为被确认的状态</mark> ，TTL 本身不会去涉及相应的删除操作，具体如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/wangteng0906/picture/img/202407191143128.png"></p><ol><li>列表项在 T1 阶段，m1-m5 这 5 条消息被确认，m6-m10 这 5 条消息未被确认</li><li>列表项在 T2 阶段，对 m6、m7、m8 这三条消息设置 TTL 策略</li><li>列表项在 T3 阶段，到达 TTL 设定的阈值，m6、m7、m8 这三条消息被确认<br>通过上图可以看到，对于 backlog 中未被确认的消息，当你设置 TTL 之后，会将未确认消息的状态变为确认的状态。TTL 在这里所起到的作用就是将消息的 Cursor 从 m5 移动到 m8，m6、m7、m8 这三条消息变为已确认状态。</li></ol><div class="note success no-icon flat"><p>Pulsar 是一个 multiple-subscription 的消息系统，对于 Topic 中的一条消息，只有当所有订阅者都对这条消息 ack 或者消费了，它才能被删除。</p></div><p>默认情况下，Pulsar Broker 会将所有未确认的消息持久化到 backlog 中。TTL 的功能是，你可以将这些未被确认的消息变为被确认的状态，而 Retention 所关注的点是，当消息处于被确认的状态时，你可以对已确认的消息进行的保留策略是什么。换句话说，backlog 是针对未确认的消息，Broker 所做的处理是什么。Retention 是针对已确认的消息，Broker 所做的保留策略是什么。</p><h2 id="TTL-与死信队列"><a href="#TTL-与死信队列" class="headerlink" title="TTL 与死信队列"></a>TTL 与死信队列</h2><p>死信队列的相关介绍在此不做赘述。</p><p>在生产环境中，有时可能遇到质量差的数据是由于上游的原因导致的，必须由上游来解决，继续尝试处理其它的消息已经没有意义，这时候用户希望在发生错误时立即停止处理。Pulsar 中提供了一种特殊的 Topic——死信队列。</p><p>死信队列与 TTL 都可以将未确认的消息变为已确认的状态。他们之间主要的不同在于，在上图中的 T2 阶段，TTL 只是将未确认的消息变为已确认的状态，死信队列的做法是将消息丢弃到死信队列中，m6、m7、m8 这三条消息变为被确认的状态。m9、m10 这两条有效消息会正常处理，Broker 也会继续运行。之后，你可以从死信队列中检查无效消息，并根据需要忽略或修复并重新处理。用户可以根据自己的需求来确定未确认的消息是通过 TTL 的形式将其变为确认状态还是通过死信队列的方式来实现，依据的主要标准就是看你需不要处理消费不了的消息。</p><h2 id="使用问题"><a href="#使用问题" class="headerlink" title="使用问题"></a>使用问题</h2><ul><li>场景一：</li></ul><p>启动 Producer 往 Broker 发送消息，设置了 TTL ，没有启动 Consumer，同时设置了 Retention 策略为半小时，到达 Retention 的阈值之后，发现设置 TTL 的消息并没有被移除，这是为什么呢？</p><p>在上述场景中，有一个问题需要注意，没有启动 Consumer，在上面我们说到，TTL 是将消息设置的 Cousor 向前移动，如果没有启动 Consumer，相当于 Cousor 没有被初始化，也就是如果没有 Consumer，你就没有必要去设置 TTL。</p><ul><li>场景二：</li></ul><p>我设置了Retention 策略，但是到达了 Retention 的阈值，Topic 中的数据并没有被删除掉，这是为什么呢？</p><p>这个是 Pulsar 内部的一个实现机制，在 Pulsar 中 Topic 是一个逻辑的概念，一个 Topic 对应一个 manage ledger，当你写数据的时候，实际上是将数据写到了 ledger 中，还记得在之前很多文章中提到的有关 Pulsar 设计的一个核心所在：<mark class="hl-label red">在Pulsar中,所有的操作都是异步的</mark> ，所以当 Retention 到达指定阈值之后，是否删除对应 ledger 中的数据，这个操作也是异步的。delete 的操作是不会对当前 active 的 ledger 执行的。只有当数据写满了当前的 ledger ，ledger 发生切换时，才会去真正的执行 retention 策略。</p><p>如果想要强制执行，可以使用 pulsar-admin 将当前的 ledger 强制卸载，迫使其发生 ledger 的切换。</p><ul><li>场景三：</li></ul><p>集群磁盘爆炸原因与解决</p><p>当bookies的硬盘被打到95%以上，会自动把bookies给设置为readonly的。</p><p>1.设置pulsar服务器，磁盘占用90%P0告警</p><p>2.当bookie进入只读模式，处理方式</p><p>（1）查看磁盘占用趋势以及消费堆积，对比大致可以得出堆积的topic</p><p>（2）手动修改（减小）过期策略，战略性放弃堆积消息 bin&#x2F;pulsar-admin namespaces set-message-ttl b2d&#x2F;2024 –messageTTL 1（<mark class="hl-label red">此处设置的1秒，具体看情况</mark> ）</p><p>（3）手动重启bookie，观察磁盘占用情况，bin&#x2F;pulsar-daemon stop&#x2F;start bookie</p><p>（4）若以上生效，则手动修改过期策略，再次重启bookie</p><p>或者</p><p>（1）conf&#x2F;bookkeeper.conf:httpServerEnabled&#x3D;false改为true，启用api调用触发gc</p><p>（2）触发命令：curl -X PUT -d ‘<a href="http://localhost:8080/api/v1/bookie/gc">http://localhost:8080/api/v1/bookie/gc</a>‘</p><p>通过 BookKeeper 暴露的 Http 调用 Admin Rest API 接口来触发 GC 请求。这个操作在日常急救运维中很常见，比如 Bookie 磁盘内存突然大幅度上涨，用户想要紧急回收数据，那么就可以跳过 Minor GC 和 Major GC 检查周期，手动触发 GC 来释放磁盘空间。</p><p>或者</p><p>（1）readOnlyModeEnabled&#x3D;true diskUsageThreshold&#x3D;0.95，将readOnlyModeEnabled改为false，这样当磁盘达到阈值不会进入只读模式，<mark class="hl-label red">但要尽快处理磁盘占用</mark> ，否则pulsar将会不可用；此步骤可以配合以上步骤使用</p><p>参考文献：<br><a href="https://cloud.tencent.com.cn/developer/article/2245703">https://cloud.tencent.com.cn/developer/article/2245703</a><br><a href="https://cloud.tencent.com/developer/article/1899216">https://cloud.tencent.com/developer/article/1899216</a></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pulsar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx之localtion规则与地址重写（超详细实例篇）</title>
      <link href="/post/006.html"/>
      <url>/post/006.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-location规则介绍"><a href="#1-1-location规则介绍" class="headerlink" title="1.1 location规则介绍"></a>1.1 location规则介绍</h1><p><strong>location是nginx的精华，nginx就是通过拦截到的请求去对配置好的location块（location block）进行<br>请求代理的。<br>location是用来具体配置代理路径的，具体格式如下：</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">location [=|~|~*|^~|@] /uri/ &#123; … &#125;</span></span><br></pre></td></tr></table></figure><p><strong>被代理的url去对location后边的字符串（或正则）进行匹配，根据一定的规则选择走哪个location，以<br>下是匹配规则。</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">语法规则： location [=|~|~*|^~] /uri/ &#123; … &#125;</span></span><br><span class="line"><span class="language-xml">= 开头表示精确匹配</span></span><br><span class="line"><span class="language-xml">^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。nginx不对url做编码，因此请求</span></span><br><span class="line"><span class="language-xml">为/static/20%/aa，可以被规则^~ /static/ /aa匹配到（注意是空格）。</span></span><br><span class="line"><span class="language-xml">~ 开头表示区分大小写的正则匹配</span></span><br><span class="line"><span class="language-xml">~* 开头表示不区分大小写的正则匹配</span></span><br><span class="line"><span class="language-xml">!~和!~*分别为区分大小写不匹配及不区分大小写不匹配 的正则</span></span><br><span class="line"><span class="language-xml">/ 通用匹配，任何请求都会匹配到</span></span><br></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">Location优先级：</span></span><br><span class="line"><span class="language-xml">= &gt; ^~ &gt; ~|~*|!~|!~* &gt; /</span></span><br><span class="line"><span class="language-xml">相同的优先级，匹配与配置文件的配置顺序有关，在上面的优先匹配</span></span><br></pre></td></tr></table></figure><p><strong>Localtion的匹配规则，首先匹配 &#x3D;，其次匹配^~, 其次是按文件中顺序的正则匹配，最后是交给 &#x2F; 通用<br>匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</strong><br><strong>实例：</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">location = / &#123;</span></span><br><span class="line"><span class="language-xml"> #规则A</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">location = /login &#123;</span></span><br><span class="line"><span class="language-xml"> #规则B</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">location ^~ /static/ &#123;</span></span><br><span class="line"><span class="language-xml"> #规则C</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">location ~ \.(gif|jpg|png|js|css)$ &#123;</span></span><br><span class="line"><span class="language-xml"> #规则D</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">location ~* \.png$ &#123;</span></span><br><span class="line"><span class="language-xml"> #规则E</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">location !~ \.xhtml$ &#123;</span></span><br><span class="line"><span class="language-xml"> #规则F</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">location !~* \.xhtml$ &#123;</span></span><br><span class="line"><span class="language-xml"> #规则G</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">location / &#123;</span></span><br><span class="line"><span class="language-xml"> #规则H</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>产生效果：</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">访问根目录/， 比如http://localhost/ 将匹配规则A</span></span><br><span class="line"><span class="language-xml">访问 http://localhost/login 将匹配规则B，http://localhost/register 则匹配规则H</span></span><br><span class="line"><span class="language-xml">访问 http://localhost/static/a.html 将匹配规则C</span></span><br><span class="line"><span class="language-xml">访问 http://localhost/a.gif, http://localhost/b.png 将匹配规则D和规则E，但是规则D顺序</span></span><br><span class="line"><span class="language-xml">优先，规则E不起作用，而 http://localhost/static/c.png 则优先匹配到 规则C</span></span><br><span class="line"><span class="language-xml">访问 http://localhost/a.PNG 则匹配规则E， 而不会匹配规则D，因为规则E不区分大小写。</span></span><br><span class="line"><span class="language-xml">访问http://localhost/a.xhtml 不会匹配规则F和规则G，http://localhost/a.XHT</span></span><br><span class="line"><span class="language-xml">ML不会匹配规则G，因为不区分大小写。规则F，规则G属于排除法，符合匹配规则但是不会匹配到，所以想想</span></span><br><span class="line"><span class="language-xml">看实际应用中哪里会用到。</span></span><br><span class="line"><span class="language-xml">访问 http://localhost/category/id/1111 则最终匹配到规则H，因为以上规则都不匹配，这个时候</span></span><br><span class="line"><span class="language-xml">应该是nginx转发请求给后端应用服务器，比如FastCGI（php），tomcat（jsp），nginx作为方向代理</span></span><br><span class="line"><span class="language-xml">服务器存在。</span></span><br></pre></td></tr></table></figure><p><strong>所以实际使用中，通常至少有三个匹配规则定义，如下：</strong></p><p><strong>直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。<br>这里是直接转发给后端应用服务器了，也可以是一个静态首页<br>第一个必选规则</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">location = / &#123;</span></span><br><span class="line"><span class="language-xml"> proxy_pass http://tomcat:8080/index</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项<br>有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">location ^~ /static/ &#123;</span></span><br><span class="line"><span class="language-xml"> root /webroot/static/;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</span></span><br><span class="line"><span class="language-xml"> root /webroot/res/;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>第三个规则就是通用规则，用来转发动态请求到后端应用服务器<br>非静态文件请求就默认是动态请求，自己根据实际把握<br>毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">location / &#123;</span></span><br><span class="line"><span class="language-xml"> proxy_pass http://tomcat:8080/</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="1-2-地址重写原理与实践"><a href="#1-2-地址重写原理与实践" class="headerlink" title="1.2 地址重写原理与实践"></a>1.2 地址重写原理与实践</h1><h2 id="1-2-1-地址重写介绍"><a href="#1-2-1-地址重写介绍" class="headerlink" title="1.2.1 地址重写介绍"></a>1.2.1 地址重写介绍</h2><p><strong>Rewrite对称URL Rewrite，即URL重写，就是把传入Web的请求重定向到其他URL的过程。</strong></p><p><strong>1.URL Rewrite最常见的应用是URL伪静态化，是将动态页面显示为静态页面方式的一种技术。比如 htt<br>p:&#x2F;&#x2F;<a href="http://www.123.com/news/index.php?id=123">www.123.com/news/index.php?id=123</a> 使用URLRewrite 转换后可以显示为 <a href="http://www.123.co/">http://www.123.co</a><br>m&#x2F;news&#x2F;123.html对于追求完美主义的网站设计师，就算是网页的地址也希望看起来尽量简洁明快。理<br>论上，搜索引擎更喜欢静态页面形式的网页，搜索引擎对静态页面的评分一般要高于动态页面。所以，<br>UrlRewrite可以让我们网站的网页更容易被搜索引擎所收录。</strong></p><p><strong>2.从安全角度上讲，如果在URL中暴露太多的参数，无疑会造成一定量的信息泄漏，可能会被一些黑客<br>利用，对你的系统造成一定的破坏，所以静态化的URL地址可以给我们带来更高的安全性。</strong></p><p><strong>3.实现网站地址跳转，例如用户访问360buy.com，将其跳转到jd.com。例如当用户访问tianyun.com<br>的80端口时，将其跳转到443端口。<br>和apache等web服务软件一样，rewrite的组要功能是实现URL地址的重定向。Nginx的rewrite功能需<br>要PCRE软件的支持，即通过perl兼容正则表达式语句进行规则匹配的。默认参数编译nginx就会支持<br>rewrite的模块，但是也必须要PCRE的支持</strong><br>epm -a pcre</p><p><strong>rewrite是实现URL重写的关键指令，根据regex（正则表达式）部分内容，重定向到replacement，结<br>尾是flag标记。</strong></p><h2 id="1-2-2-Nginx地址重写语法"><a href="#1-2-2-Nginx地址重写语法" class="headerlink" title="1.2.2 Nginx地址重写语法"></a>1.2.2 Nginx地址重写语法</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">在匹配过程中可以引用一些Nginx的全局变量</span></span><br><span class="line"><span class="language-xml">$args 请求中的参数;</span></span><br><span class="line"><span class="language-xml">$document_root 针对当前请求的根路径设置值;</span></span><br><span class="line"><span class="language-xml">$host 请求信息中的&quot;Host&quot;，如果请求中没有Host行，则等于设置的服务器名;</span></span><br><span class="line"><span class="language-xml">$limit_rate 对连接速率的限制;</span></span><br><span class="line"><span class="language-xml">$request_method 请求的方法，比如&quot;GET&quot;、&quot;POST&quot;等;</span></span><br><span class="line"><span class="language-xml">$remote_addr 客户端地址;</span></span><br><span class="line"><span class="language-xml">$remote_port 客户端端口号;</span></span><br><span class="line"><span class="language-xml">$remote_user 客户端用户名，认证用;</span></span><br><span class="line"><span class="language-xml">$request_filename 当前请求的文件路径名（带root指定的路径）</span></span><br><span class="line"><span class="language-xml">$request_uri 当前请求的文件路径名（不带root指定的路径 /images/a.jpg）</span></span><br><span class="line"><span class="language-xml">$query_string 与$args相同;</span></span><br><span class="line"><span class="language-xml">$scheme 用的协议，比如http或者是https</span></span><br><span class="line"><span class="language-xml">$server_protocol 请求的协议版本，&quot;HTTP/1.0&quot;或&quot;HTTP/1.1&quot;;</span></span><br><span class="line"><span class="language-xml">$server_addr 服务器地址，如果没有用listen指明服务器地址，使用这个变量将发起一次系统调用以取得地址;</span></span><br><span class="line"><span class="language-xml">$server_name 请求到达的服务器名;</span></span><br><span class="line"><span class="language-xml">$document_uri 与$uri一样，URI地址;</span></span><br><span class="line"><span class="language-xml">$server_port 请求到达的服务器端口号;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-3-rewrite语法"><a href="#1-2-3-rewrite语法" class="headerlink" title="1.2.3 rewrite语法"></a>1.2.3 rewrite语法</h2><p><strong>rewrite语法格式及参数语法说明如下:</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">rewrite  <span class="tag">&lt;<span class="name">regex</span>&gt;</span>  <span class="tag">&lt;<span class="name">replacement</span>&gt;</span>  [flag];</span></span><br><span class="line"><span class="language-xml">关键字     正则      替代内容      flag标记</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">关键字：其中关键字rewrite不能改变</span></span><br><span class="line"><span class="language-xml">正则：perl兼容正则表达式语句进行规则匹配</span></span><br><span class="line"><span class="language-xml">替代内容：将正则匹配的内容替换成replacement</span></span><br><span class="line"><span class="language-xml">flag标记：rewrite支持的flag标记</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag标记说明：</span></span><br><span class="line"><span class="language-xml">last #本条规则匹配完成后，继续向下匹配新的location URI规则</span></span><br><span class="line"><span class="language-xml">break #本条规则匹配完成即终止，不再匹配后面的任何规则</span></span><br><span class="line"><span class="language-xml">redirect #返回302临时重定向，浏览器地址会显示跳转后的URL地址</span></span><br><span class="line"><span class="language-xml">permanent #返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</span></span><br></pre></td></tr></table></figure><p><strong>区别：</strong><br><strong>redirect 和 permanent区别则是返回的不同方式的重定向，对于客户端来说一般状态下是没有区别的。而对于搜<br>索引擎，相对来说301的重定向更加友好，如果我们把一个地址采用301跳转方式跳转的话，搜索引擎会把老地<br>址的相关信息带到新地址，同时在搜索引擎索引库中彻底废弃掉原先的老地址。使用302重定向时，搜索引擎<br>(特别是google)有时会查看跳转前后哪个网址更直观，然后决定显示哪个，如果它觉的跳转前的URL更好的话，<br>也许地址栏不会更改，那么很有可能出现URL劫持的现像。在做URI重写时，有时会发现URI中含有相关参数，<br>如果需要将这些参数保存下来，并且在重写过程中重新引用，可以用到 () 和 $N 的方式来解决。</strong></p><h2 id="1-2-4-rewrite企业应用场景"><a href="#1-2-4-rewrite企业应用场景" class="headerlink" title="1.2.4 rewrite企业应用场景"></a>1.2.4 rewrite企业应用场景</h2><p><strong>Nginx的rewrite功能在企业里应用非常广泛：<br>可以调整用户浏览的URL，看起来更规范，合乎开发及产品人员的需求。<br>为了让搜索引擎搜录网站内容及用户体验更好，企业会将动态URL地址伪装成静态地址提供服务。<br>网址换新域名后，让旧的访问跳转到新的域名上。例如，访问京东的360buy.com会跳转到jd.com<br>根据特殊变量、目录、客户端的信息进行URL调整等</strong></p><h2 id="1-2-5-地址重写实例"><a href="#1-2-5-地址重写实例" class="headerlink" title="1.2.5 地址重写实例"></a>1.2.5 地址重写实例</h2><p><strong>实例1：如果访问不存在的任意网页都重定向到错误页面</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">location / &#123;</span></span><br><span class="line"><span class="language-xml">     root  html;</span></span><br><span class="line"><span class="language-xml">     index index.html index.htm;</span></span><br><span class="line"><span class="language-xml">     if (!-f $request_filename) &#123;</span></span><br><span class="line"><span class="language-xml">       rewrite /.* /err.html permanent; (permanent表示永久的重定向到这个页</span></span><br><span class="line"><span class="language-xml">面)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>实例2：为某个目录定义别名，用户访问的路径其实并不存在，而是将其转发到另外一个页面</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">location / &#123;</span></span><br><span class="line"><span class="language-xml">    root  html;</span></span><br><span class="line"><span class="language-xml">    index index.html ;</span></span><br><span class="line"><span class="language-xml">    rewrite ^/forum/(.*) /bbs/$1 last ;</span></span><br><span class="line"><span class="language-xml">......</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>实例3：实现域名跳转</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">server &#123;</span></span><br><span class="line"><span class="language-xml">   listen    80;</span></span><br><span class="line"><span class="language-xml">   server_name web.uplook.com;</span></span><br><span class="line"><span class="language-xml">如果访问web.uplook.com则跳转到www.uplook.com</span></span><br><span class="line"><span class="language-xml">   rewrite ^/.* http://www.uplook.com/$1 last;</span></span><br><span class="line"><span class="language-xml">#charset koi8-r;</span></span><br><span class="line"><span class="language-xml">#access_log logs/host.access.log main;</span></span><br><span class="line"><span class="language-xml">location / &#123;</span></span><br><span class="line"><span class="language-xml">   root  html;</span></span><br><span class="line"><span class="language-xml">   index index.html ;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-6-Nginx地址重写企业运用场景"><a href="#1-2-6-Nginx地址重写企业运用场景" class="headerlink" title="1.2.6 Nginx地址重写企业运用场景"></a>1.2.6 Nginx地址重写企业运用场景</h2><p><strong>实例一：</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">#http://www.blog.com/abc/a/1.html ==&gt; http://www.blog.com/ccc/bbb/2.html</span></span><br><span class="line"><span class="language-xml">location /abc &#123;</span></span><br><span class="line"><span class="language-xml">rewrite .* /ccc/bbb/2.html permanent;</span></span><br><span class="line"><span class="language-xml">#return 301 /ccc/bbb/2.html;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>实例二：</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">#http://www.blog.com/2015/ccc/bbb/2.html ==&gt; http://www.blog.com/2014/ccc/bbb/2.html</span></span><br><span class="line"><span class="language-xml">location /2015 &#123;</span></span><br><span class="line"><span class="language-xml">rewrite ^/2015/(.*)$ /2014/$1 permanent;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>实例三：</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">#http://www.360buy.com/aaa/1.html ==&gt; http://jd.com</span></span><br><span class="line"><span class="language-xml">if ( $host ~* 360buy.com ) &#123;</span></span><br><span class="line"><span class="language-xml">rewrite .* http://jd.com permanent;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">注意：配置host</span></span><br></pre></td></tr></table></figure><p><strong>实例四：</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">#http://www.360buy.com/ccc/1.html ==&gt; http://jd.com/ccc/1.html</span></span><br><span class="line"><span class="language-xml">if ( $host ~* 360buy.com ) &#123;</span></span><br><span class="line"><span class="language-xml">rewrite .* http://jd.com$request_uri permanent;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>实例五：</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">在访问目录后添加/ (如果目录后已有/，则不加/)</span></span><br><span class="line"><span class="language-xml">#http://www.blog.com/ccc/abc</span></span><br><span class="line"><span class="language-xml">#$1: /ccc/ab</span></span><br><span class="line"><span class="language-xml">#$2: c</span></span><br><span class="line"><span class="language-xml">#http://$host$1$2/</span></span><br><span class="line"><span class="language-xml">if (-d $request_filename) &#123;</span></span><br><span class="line"><span class="language-xml">rewrite ^(.*)([^/])$ http://$host$1$2/ permanent; http://www.360buy123.com/ccc/abc/</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>实例六：</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">#http://www.blog.com/login/blog.html ==&gt; http://www.blog.com/reg/login.php?user=blog</span></span><br><span class="line"><span class="language-xml">location /login &#123;</span></span><br><span class="line"><span class="language-xml">rewrite ^/login/(.*)\.html$ /reg/login.php?user=$1 permanent;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>实例七：</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">#http://www.blog.com/uplook/11-22-33.html ==&gt; http://www.blog.com/uplook/11/22/33.html</span></span><br><span class="line"><span class="language-xml">location /uplook &#123;</span></span><br><span class="line"><span class="language-xml">rewrite ^/uplook/([0-9]+)-([0-9]+)-([0-9]+)\.html$ /uplook/$1/$2/$3.html permanent;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>实例八：</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">set 指令是用于定义一个变量，并且赋值。应用于server,location,if环境。</span></span><br><span class="line"><span class="language-xml">#http://alice.blog.com ==&gt; http://www.blog.com/alice</span></span><br><span class="line"><span class="language-xml">#http://jack.blog.com ==&gt; http://www.blog.com/jack</span></span><br><span class="line"><span class="language-xml">[root@root html]# mkdir jack alice</span></span><br><span class="line"><span class="language-xml">[root@root html]# echo jack.... &gt; jack/index.html</span></span><br><span class="line"><span class="language-xml">[root@root html]# echo alice... &gt; alice/index.html</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">a. DNS实现泛解析</span></span><br><span class="line"><span class="language-xml">*.blog.com IN A 网站IP</span></span><br><span class="line"><span class="language-xml">b. nginx Rewrite</span></span><br><span class="line"><span class="language-xml">if ($host ~* &quot;^www.blog.com$&quot; ) &#123;</span></span><br><span class="line"><span class="language-xml">break;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">if ($host ~* &quot;^(.*)\.blog\.com$&quot; ) &#123;</span></span><br><span class="line"><span class="language-xml">set $user $1;</span></span><br><span class="line"><span class="language-xml">rewrite .* http://www.blog.com/$user permanent;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>实例九：</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">80 ======&gt; 443 访问80端口跳转到443端口</span></span><br><span class="line"><span class="language-xml">server &#123;</span></span><br><span class="line"><span class="language-xml">listen 80;</span></span><br><span class="line"><span class="language-xml">server_name www.blog.com blog.com;</span></span><br><span class="line"><span class="language-xml">return 301 https://www.blog.com$request_uri;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">server &#123;</span></span><br><span class="line"><span class="language-xml">listen 443 ssl;</span></span><br><span class="line"><span class="language-xml">server_name www.blog.com;</span></span><br><span class="line"><span class="language-xml">ssl on;</span></span><br><span class="line"><span class="language-xml">ssl_certificate /usr/local/nginx/conf/cert.pem;</span></span><br><span class="line"><span class="language-xml">ssl_certificate_key /usr/local/nginx/conf/cert.key;:</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7上PXE服务器的搭建部署</title>
      <link href="/post/005.html"/>
      <url>/post/005.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/wangteng0906/picture/img/202407051754001.gif"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><strong>目前行业中普遍采用的解决方案是通过网络方式安装并结合自动应答文件，实现无人值守自动化安装部署操作系统。这种安装方式需要我们配置至少一台服务器，所有需要安装系统的客户端通过网络 的方式连接服务端启动安装程序，在根据服务器中存放的自动应答文件实现大规模自动自动安装部署系统。整体拓扑如下：</strong><img src="https://cdn.jsdelivr.net/gh/wangteng0906/picture/img/202407051828146.png"></p><p><strong>这种无人值守的解决方案需要提前部署一台包含DHCP、TFTP，NFS等服务器。</strong></p><p>安装部署的流程为：客户端首先需要在BIOS中设置通过网络启动，当客户端启动后，就会通过发送广播包的方<br>式寻找DHCP服务器，如果找到了DHCP服务器，即可向该服务器申请获得包括IP地址在内的网络参数，并通过<br>DHCP获得TFTP的位置，当客户端获得TFTP服务器的地址后，即可从TFTP服务器上将启动文件下载到本机内<br>存并且运行，最终实现无盘启动的功能。<br>可以在启动文件中设置Kickstart文件共享的位置，这样客户端启动后，即可自动寻找kickstart文件实现<br>无人值守安装操作系统。注意，kickstart文件需要实现通过网络共享。在kickstart文件中描述了如何安<br>装设置操作系统。运行部署脚本等。</p><h2 id="1、PXE介绍"><a href="#1、PXE介绍" class="headerlink" title="1、PXE介绍"></a>1、PXE介绍</h2><p> PXE是由Intel公司开发的基于客户端&#x2F;服务器模式的一种技术，其核心功能是让客户通过网络从远端服务<br>器下载启动镜像，从而实现网络启动。整个过程中，客户机要求服务器分配IP地址，在使用TFTP协议下<br>载位于服务器上的启动镜像到本机内存中并执行，由这个启动文件完成客户端基本软件的设置。</p><h2 id="2、kickstart技术"><a href="#2、kickstart技术" class="headerlink" title="2、kickstart技术"></a>2、kickstart技术</h2><p>  kickstart安装是目前主要的一种无人值守自动部署安装操作系统的方式，使用这种技术，我们可以很轻<br>松地实现自动安装和配置操作系统。这种技术核心是自动应答文件（kickstart文件），即将本来在安装<br>过程中需要我们手动设置的语言、密码、网络参数等通过读取自动应答文件实现自动设置。也就是说，<br>我们需要事先将对操作系统的设置写入自动应答文件中，开始安装操作系统是，指定安装程序读取自动<br>应答文件实现自动安装及部署操作系统。<br>kickstart文件可以通过如下三种方式生成。</p><p>（1）手动书写（仅需要一个文本编辑工具即可）。<br>（2）通过system-config-kickstart图形工具。<br>（3）通过红帽的安装程序Anaconda自动生成。</p><h2 id="3、配置安装服务器"><a href="#3、配置安装服务器" class="headerlink" title="3、配置安装服务器"></a>3、配置安装服务器</h2><p><strong>PXE安装流程</strong><br><img src="https://cdn.jsdelivr.net/gh/wangteng0906/picture/img/202407051829657.png"></p><h3 id="3-1-DHCP服务"><a href="#3-1-DHCP服务" class="headerlink" title="3.1 DHCP服务"></a>3.1 DHCP服务</h3><p>DHCP服务器主要实现在企业内部网络为客户端分配IP地址等网络参数。在我们的无人值守环境中，当<br>客户端选择从网络启动后，就会通过发送广播数据包的形式寻找DHCP服务器，从DNCP获得IP地址等参<br>数后才可以通过TFTP共享读取启动文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># yum -y install dhcp</span></span><br></pre></td></tr></table></figure><p>安装后，DHCP服务的主配置文件为&#x2F;etc&#x2F;dhcp&#x2F;dhcp.conf.我们可以修改配置文件以实现为客户端分配<br>网络参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">拷贝配置文件</span><br><span class="line">[root@localhost dhcp]<span class="meta"># cd /usr/share/doc/dhcp-4.2.5/</span></span><br><span class="line">[root@localhost dhcp<span class="number">-4.2</span><span class="number">.5</span>]<span class="meta"># ls</span></span><br><span class="line">dhcpd6.conf.example dhcpd.conf.example ldap</span><br><span class="line">[root@localhost dhcp<span class="number">-4.2</span><span class="number">.5</span>]<span class="meta"># cp dhcpd.conf.example /etc/dhcp/</span></span><br><span class="line">修改配置文件</span><br><span class="line">[root@localhost dhcp<span class="number">-4.2</span><span class="number">.5</span>]<span class="meta"># cd /etc/dhcp/</span></span><br><span class="line">[root@localhost dhcp]<span class="meta"># cp dhcpd.conf dhcpd.conf.bak</span></span><br><span class="line">[root@localhost dhcp]<span class="meta"># mv dhcpd.conf.example dhcpd.conf</span></span><br><span class="line"></span><br><span class="line">[root@localhost dhcp]<span class="meta"># vim dhcpd.conf</span></span><br><span class="line"><span class="meta"># dhcpd.conf</span></span><br><span class="line">#</span><br><span class="line"># Sample configuration file <span class="keyword">for</span> ISC dhcpd</span><br><span class="line">#</span><br><span class="line"><span class="meta"># option definitions common to all supported networks...</span></span><br><span class="line">log-facility local7;</span><br><span class="line"># A slightly different configuration <span class="keyword">for</span> an internal subnet.</span><br><span class="line">subnet <span class="number">192.168</span><span class="number">.79</span><span class="number">.0</span> netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> &#123;      #指定为那个网段分配网络参数</span><br><span class="line">range <span class="number">192.168</span><span class="number">.79</span><span class="number">.3</span> <span class="number">192.168</span><span class="number">.79</span><span class="number">.100</span>;         #设置准备为客户端分配的IP地址</span><br><span class="line">option domain-name-servers centos7.expample.com;  #设置分配给客户端的DNS服务器地</span><br><span class="line">址。</span><br><span class="line">option routers <span class="number">192.168</span><span class="number">.79</span><span class="number">.2</span>;            #设置分配给客户端的网关地址。</span><br><span class="line"><span class="keyword">default</span>-lease-time <span class="number">600</span>;               <span class="meta">#</span></span><br><span class="line"><span class="meta">max-lease-time 7200;</span></span><br><span class="line">next-server <span class="number">192.168</span><span class="number">.79</span><span class="number">.171</span>             #TFTP服务器地址</span><br><span class="line">filename <span class="string">&quot;pxelinux.0&quot;</span>;               #在TFTP服务器上共享的启动文件</span><br><span class="line">名</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-TFTP服务"><a href="#3-2-TFTP服务" class="headerlink" title="3.2 TFTP服务"></a>3.2 TFTP服务</h3><p>TFTP服务为客户端提供一种简单的文件共享，他不具备向FTP那样丰富的功能，不过由于简单的设计，<br>TFTP非常适用于传输小且简单的PXE启动文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">安装TFTP：</span><br><span class="line">[root@localhost ~]<span class="meta"># yum install tftp-server -y</span></span><br><span class="line">修改配置文件</span><br><span class="line">[root@localhost ~]<span class="meta"># vim /etc/xinetd.d/tftp</span></span><br><span class="line"><span class="meta"># default: off</span></span><br><span class="line"><span class="meta"># description: The tftp server serves files using the trivial file transfer \</span></span><br><span class="line"><span class="meta"># protocol. The tftp protocol is often used to boot diskless \</span></span><br><span class="line"><span class="meta"># workstations, download configuration files to network-aware printers, \</span></span><br><span class="line"><span class="meta"># and to start the installation process for some operating systems.</span></span><br><span class="line">service tftp</span><br><span class="line">&#123;</span><br><span class="line">   socket_type       = dgram</span><br><span class="line">   protocol          = udp</span><br><span class="line">   wait              = yes</span><br><span class="line">   user              = root</span><br><span class="line">   server            = /usr/sbin/in.tftpd</span><br><span class="line">   server_args       = -s /var/lib/tftpboot</span><br><span class="line">   disable           = yes          #打开禁用状态</span><br><span class="line">   per_source        = <span class="number">11</span></span><br><span class="line">   cps               = <span class="number">100</span> <span class="number">2</span></span><br><span class="line">   flags             = IPv4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-FTP服务"><a href="#3-3-FTP服务" class="headerlink" title="3.3 FTP服务"></a>3.3 FTP服务</h3><p>FTP是file Transfer Protocol的简写，及文件传输协议。目前市面上有很多可以实现FTP协议的软件，<br>vsftp就是一种利用FTP协议进行数据共享的软件，vsftp主要特色就是提供一种安全的数据共享服务。我<br>们可以使用它作为Centos系统文件的共享服务平台，当客户端从网络从网络启动正式进入到安装界面<br>后，还需要读取Centos光盘中的系统文件，已完成最后的安装。这些文件就通过vsftp共享给网络用<br>户。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># rpm -q vsftpd</span></span><br><span class="line">未安装软件包 vsftp</span><br><span class="line">[root@localhost ~]<span class="meta"># yum install vsftpd</span></span><br></pre></td></tr></table></figure><h2 id="4、自动化安装实例"><a href="#4、自动化安装实例" class="headerlink" title="4、自动化安装实例"></a>4、自动化安装实例</h2><h3 id="4-1主机规划"><a href="#4-1主机规划" class="headerlink" title="4.1主机规划"></a>4.1主机规划</h3><table><thead><tr><th>IP</th><th>服务</th></tr></thead><tbody><tr><td>192.168.79.171</td><td>DHCP、TFTP、FTP</td></tr></tbody></table><p>初始化系统环境：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># systemctl stop firewalld</span></span><br><span class="line">[root@localhost ~]<span class="meta"># systemctl disable firewalld</span></span><br><span class="line">[root@localhost ~]<span class="meta"># sed -i.bak <span class="string">&#x27;s/=enforcing/=disabled/&#x27;</span> /etc/sysconfig/selinux</span></span><br><span class="line">[root@localhost ~]<span class="meta"># sed -i.bak <span class="string">&#x27;s/=enforcing/=disabled/&#x27;</span> /etc/selinux/config</span></span><br><span class="line">[root@localhost ~]<span class="meta"># setenforce 0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建安装目录结构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ftp]<span class="meta"># cd /var/ftp/</span></span><br><span class="line">[root@localhost ftp]<span class="meta"># mkdir centos7u4</span></span><br><span class="line">[root@localhost ftp]<span class="meta"># cd /var/lib/tftpboot/</span></span><br><span class="line">[root@localhost tftpboot]<span class="meta"># mkdir centos7u4</span></span><br></pre></td></tr></table></figure><h3 id="4-2-配置DHCP"><a href="#4-2-配置DHCP" class="headerlink" title="4.2 配置DHCP"></a>4.2 配置DHCP</h3><p>修改配置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost dhcp]<span class="meta"># vim dhcpd.conf</span></span><br><span class="line"><span class="meta"># dhcpd.conf</span></span><br><span class="line">#</span><br><span class="line"># Sample configuration file <span class="keyword">for</span> ISC dhcpd</span><br><span class="line">#</span><br><span class="line"><span class="meta"># option definitions common to all supported networks...</span></span><br><span class="line">log-facility local7;</span><br><span class="line"># A slightly different configuration <span class="keyword">for</span> an internal subnet.</span><br><span class="line">subnet <span class="number">192.168</span><span class="number">.79</span><span class="number">.0</span> netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> &#123;      </span><br><span class="line">range <span class="number">192.168</span><span class="number">.79</span><span class="number">.3</span> <span class="number">192.168</span><span class="number">.79</span><span class="number">.100</span>;         </span><br><span class="line">option domain-name-servers centos7.expample.com;  </span><br><span class="line">option routers <span class="number">192.168</span><span class="number">.79</span><span class="number">.2</span>;            </span><br><span class="line"><span class="keyword">default</span>-lease-time <span class="number">600</span>;              </span><br><span class="line">max-lease-time <span class="number">7200</span>;</span><br><span class="line">next-server <span class="number">192.168</span><span class="number">.79</span><span class="number">.171</span>  ;           </span><br><span class="line">filename <span class="string">&quot;pxelinux.0&quot;</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tftpboot]<span class="meta"># systemctl start dhcpd</span></span><br><span class="line">[root@localhost tftpboot]<span class="meta"># systemctl enable dhcpd</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/dhcpd.service to /usr/lib/systemd/system/dhcpd.service.</span><br><span class="line">[root@localhost tftpboot]<span class="meta"># netstat -ntplu |grep 67</span></span><br><span class="line">udp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">67</span>              <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*                           <span class="number">116439</span>/dhcpd</span><br><span class="line">udp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">67</span>              <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*                           <span class="number">2932</span>/dnsmasq</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-3-配置TFTP服务器"><a href="#4-3-配置TFTP服务器" class="headerlink" title="4.3 配置TFTP服务器"></a>4.3 配置TFTP服务器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">service tftp</span><br><span class="line">&#123;</span><br><span class="line">   socket_type       = dgram</span><br><span class="line">   protocol          = udp</span><br><span class="line">   wait              = yes</span><br><span class="line">   user              = root</span><br><span class="line">   server             = /usr/sbin/in.tftpd</span><br><span class="line">   server_args       = -s /var/lib/tftpboot</span><br><span class="line">   disable            = no</span><br><span class="line">   per_source         = <span class="number">11</span></span><br><span class="line">   cps                = <span class="number">100</span> <span class="number">2</span></span><br><span class="line">   flags              = IPv4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>安装tftp的动态管理工具<br>tfpt是被xinetd动态管理的服务，所以我们需要同时连接xinetd一起安装，后面的操作中，启动服务，<br>只需要启动xinetd即可。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost dhcp]<span class="meta"># yum install xinetd</span></span><br></pre></td></tr></table></figure><p>将客户端所需要的启动引导文件复制到TFTP服务器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost dhcp]<span class="meta"># yum install syslinux      通过该软件包获取引导文件</span></span><br><span class="line">[root@localhost dhcp]<span class="meta"># cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/</span></span><br><span class="line">将镜像放在光驱并运行如下命令，从光盘中复制启动镜像文件和启动配置文件到TFTP共享目录。</span><br></pre></td></tr></table></figure><p>创建镜像目录</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># mkdir -p /iso</span></span><br><span class="line">[root@localhost /]<span class="meta"># cd iso/</span></span><br><span class="line"></span><br><span class="line">上传镜像至/iso目录下</span><br><span class="line">[root@localhost iso]<span class="meta"># ls</span></span><br><span class="line">CentOS<span class="number">-7</span>-x86_64-Everything<span class="number">-1810.</span>iso</span><br><span class="line"></span><br><span class="line">[root@localhost centos7u4]<span class="meta"># mount -o loop -t iso9660 /iso/CentOS-7-x86_64-Everything-1810.iso /var/ftp/centos7u6</span></span><br><span class="line">mount: /dev/loop0 写保护，将以只读方式挂载</span><br><span class="line">[root@localhost isolinux]<span class="meta"># ls</span></span><br><span class="line">boot.cat  boot.msg  grub.conf  initrd.img  isolinux.bin  isolinux.cfg  memtest  splash.png  TRANS.TBL  vesamenu.c32  vmlinuz</span><br><span class="line">[root@localhost isolinux]<span class="meta"># pwd</span></span><br><span class="line">/var/ftp/centos7u6/isolinux</span><br><span class="line"></span><br><span class="line">[root@localhost isolinux]<span class="meta"># cp /var/ftp/centos7u4/isolinux/vesamenu.c32</span></span><br><span class="line">/var/lib/tftpboot/</span><br><span class="line">[root@localhost isolinux]<span class="meta"># cp /var/ftp/centos7u4/isolinux/vmlinuz</span></span><br><span class="line">/var/lib/tftpboot/centos7u4/</span><br><span class="line">[root@localhost isolinux]<span class="meta"># cp /var/ftp/centos7u4/isolinux/initrd.img</span></span><br><span class="line">/var/lib/tftpboot/centos7u4/</span><br><span class="line"></span><br><span class="line">[root@localhost isolinux]<span class="meta"># mkdir /var/lib/tftpboot/pxelinux.cfg</span></span><br><span class="line">把<span class="keyword">default</span>放入.</span><br><span class="line">[root@localhost dhcp]<span class="meta"># chmod 644 /var/lib/tftpboot/pxelinux.cfg/default</span></span><br></pre></td></tr></table></figure><p>修改启动配置文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vim /var/lib/tftpboot/pxelinux.cfg/<span class="keyword">default</span></span><br><span class="line"><span class="keyword">default</span> vesamenu.c32</span><br><span class="line">timeout <span class="number">60</span></span><br><span class="line">display boot.msg</span><br><span class="line">menu background splash.jpg     #背景，可以自己改，但尺寸要把握好</span><br><span class="line">menu title Centos of Bingo     #标题</span><br><span class="line"></span><br><span class="line">label centos7 <span class="number">64</span> &lt;Auto Installation&gt;</span><br><span class="line">  menu label Install CentOS Linux ^<span class="number">7</span> x86_64 &lt;Auto&gt;</span><br><span class="line">  kernel centos7u6/vmlinuz</span><br><span class="line">  append initrd=centos7u6/initrd.img  inst.stage2=ftp:<span class="comment">//192.168.79.171/centos7u6</span></span><br><span class="line">  inst.repo=ftp:<span class="comment">//192.168.79.171/centos7u6 inst.ks=ftp://192.168.79.171/centos-7-ks.cfg</span></span><br><span class="line"></span><br><span class="line">label centos7 <span class="number">64</span> &lt;Manual Installation&gt;</span><br><span class="line">menu label Install CentOS Linux ^<span class="number">7</span> x86_64 &lt;Manual&gt;</span><br><span class="line">kernel centos7u6/vmlinuz</span><br><span class="line">append initrd=centos7u6/initrd.img inst.stage2=ftp:<span class="comment">//192.168.79.171/centos7u6</span></span><br><span class="line"></span><br><span class="line">label local</span><br><span class="line">  menu <span class="keyword">default</span> menu label Boot from ^local drive</span><br><span class="line">  localboot <span class="number">0xffff</span></span><br><span class="line">menu end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost pxelinux.cfg]<span class="meta"># systemctl restart xinetd.service</span></span><br><span class="line">[root@localhost pxelinux.cfg]<span class="meta"># systemctl enable xinetd</span></span><br><span class="line">[root@localhost pxelinux.cfg]<span class="meta"># ss -ntplu |grep 69</span></span><br><span class="line">udp    UNCONN     <span class="number">0</span>      <span class="number">0</span>         *:<span class="number">69</span>                    *:*                   users:((<span class="string">&quot;xinetd&quot;</span>,pid=<span class="number">3131</span>,fd=<span class="number">5</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-3-创建自动应答文件"><a href="#4-3-创建自动应答文件" class="headerlink" title="4.3 创建自动应答文件"></a>4.3 创建自动应答文件</h3><p><strong>注意：</strong> <code>虚拟机需安装图形化，未安装的话乱码，建议在安装了图形化的的虚拟机生成，然后拷贝使用</code></p><p>首先安装system-config-kickstart图形工具，在终端命令行输入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># yum install system-config-kickstart</span></span><br><span class="line">[root@localhost ~]<span class="meta"># system-config-kickstart</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangteng0906/picture/img/202407051830935.png"></p><p>查看ks文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># cat ks.cfg</span></span><br><span class="line"><span class="meta">#platform=x86, AMD64, 或 Intel EM64T</span></span><br><span class="line"><span class="meta">#version=DEVEL</span></span><br><span class="line"># Install OS instead of upgrade</span><br><span class="line">install</span><br><span class="line"># Keyboard layouts</span><br><span class="line">keyboard <span class="string">&#x27;us&#x27;</span></span><br><span class="line"># Root password</span><br><span class="line">rootpw --iscrypted $<span class="number">1</span>$JoUhw4BT$/G6kcw2tEbOrfqY2DxywO.</span><br><span class="line"># Use network installation</span><br><span class="line">url --url=<span class="string">&quot;ftp://192.168.79.171/centos7u6&quot;</span></span><br><span class="line"># System language</span><br><span class="line">lang zh_CN</span><br><span class="line"># System authorization information</span><br><span class="line">auth  --useshadow  --passalgo=sha512</span><br><span class="line"># Use text mode install</span><br><span class="line">text</span><br><span class="line"># SELinux configuration</span><br><span class="line">selinux --disabled</span><br><span class="line"># Do <span class="keyword">not</span> configure the X Window System</span><br><span class="line">skipx</span><br><span class="line"></span><br><span class="line"># Firewall configuration</span><br><span class="line">firewall --disabled</span><br><span class="line"># Reboot after installation</span><br><span class="line">reboot</span><br><span class="line"># System timezone</span><br><span class="line">timezone Asia/Shanghai</span><br><span class="line"># System bootloader configuration</span><br><span class="line">bootloader --location=mbr</span><br><span class="line"># Clear the Master Boot Record</span><br><span class="line">zerombr</span><br><span class="line"># Partition clearing information</span><br><span class="line">clearpart --all --initlabel</span><br><span class="line"># Disk partitioning information</span><br><span class="line">part /boot --fstype=<span class="string">&quot;xfs&quot;</span> --size=<span class="number">200</span></span><br><span class="line">part swap --fstype=<span class="string">&quot;swap&quot;</span> --size=<span class="number">1000</span></span><br><span class="line">part / --fstype=<span class="string">&quot;xfs&quot;</span> --grow --size=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">#下面的内容为手动添加编写的内容，以%packages开始。%end结尾，中间是需要安装的软件包或者软件包组</span><br><span class="line">的名称这里我们安装core和base这两个包租</span><br><span class="line">%packages</span><br><span class="line">@base</span><br><span class="line">net-tools</span><br><span class="line">@core</span><br><span class="line">%end</span><br></pre></td></tr></table></figure><p>检查有无语法错误</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># ksvalidator ks.cfg</span></span><br></pre></td></tr></table></figure><p>将ks文件移动到&#x2F;var&#x2F;lib&#x2F;tftp下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># mv ks.cfg /var/ftp/centos-7-ks.cfg</span></span><br></pre></td></tr></table></figure><h3 id="4-4-测试安装虚拟机"><a href="#4-4-测试安装虚拟机" class="headerlink" title="4.4 测试安装虚拟机"></a>4.4 测试安装虚拟机</h3><p><code>新创建的虚拟机要求内存2G以上，1G会由于内存不足安装失败</code><br>打开虚拟机，设置从网络启动。<br><img src="https://cdn.jsdelivr.net/gh/wangteng0906/picture/img/202407051832722.png"></p><p><img src="https://cdn.jsdelivr.net/gh/wangteng0906/picture/img/202407051832602.png"><br><strong>总结：安装 CentOS7 时,内核加载到dracut-initqueue[629]: curl: (23) Failed writing body后面就一直报错,一会儿以后就与不断地报出dracut-initqueue[691]: Warning: dracut-initqueue timeout - starting timeout scripts地错误。</strong><br><code>官方给的解决方案：</code><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1595369">官方给的解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用shell实现frp自动部署以及生成相应客户端服务端配置文件</title>
      <link href="/post/004.html"/>
      <url>/post/004.html</url>
      
        <content type="html"><![CDATA[<p><strong>需求分析：</strong><br>1.之前手动去生成frp的配置文件，需要改的地方多，繁琐容易出错<br>                  2.通过shell脚本实现自动化批量生成所需要的配置文件<br><strong>操作步骤：</strong><br>1.在相应的relay01与02节点分别安装frp  (对应节点服务器)<br>                  2.将此脚本copy到自己的家目录下    （堡垒机）<br>                  3.执行脚本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Author:teng</span></span><br><span class="line"></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入英文节点名:&gt;&gt;&gt;&quot;</span>  node</span><br><span class="line"><span class="built_in">cd</span> </span><br><span class="line">home_path=`pwd`</span><br><span class="line">kscinfo_path=<span class="variable">$home_path</span>/kscinfo/</span><br><span class="line">relay_out_ip=`$kscinfo_path/./kscinfo.py <span class="literal">-l</span> <span class="literal">-e</span> node=<span class="variable">$node</span> |grep relay |awk <span class="operator">-F</span> <span class="string">&quot;|&quot;</span> <span class="string">&#x27;&#123;ip[x++]=$6&#125;;END&#123;for(i=0;i&lt;NR;i++)print ip[i] &#125;&#x27;</span>`      <span class="comment">#获取relay IP </span></span><br><span class="line">cache_out_ip=`$kscinfo_path/./kscinfo.py <span class="literal">-l</span> <span class="literal">-e</span> node=<span class="variable">$node</span> |grep cache |awk <span class="operator">-F</span> <span class="string">&quot;|&quot;</span> <span class="string">&#x27;&#123;ip[x++]=$6&#125;;END&#123;for(i=0;i&lt;NR;i++)print ip[i] &#125;&#x27;</span>`      <span class="comment">#获取cache IP</span></span><br><span class="line">cache_ilo_ip=`$kscinfo_path/./kscinfo.py <span class="literal">-l</span> <span class="literal">-e</span> node=<span class="variable">$node</span> |grep cache |awk <span class="operator">-F</span> <span class="string">&quot;|&quot;</span> <span class="string">&#x27;&#123;ip[x++]=$7&#125;;END&#123;for(i=0;i&lt;NR;i++)print ip[i] &#125;&#x27;</span>`</span><br><span class="line">cache_in_ip=`$kscinfo_path/./kscinfo.py <span class="literal">-l</span> <span class="literal">-e</span> node=<span class="variable">$node</span> |grep cache |awk <span class="operator">-F</span> <span class="string">&quot;|&quot;</span> <span class="string">&#x27;&#123;ip[x++]=$8&#125;;END&#123;for(i=0;i&lt;NR;i++)print ip[i] &#125;&#x27;</span>`</span><br><span class="line">cache_num=`$kscinfo_path/./kscinfo.py <span class="literal">-l</span> <span class="literal">-e</span> node=<span class="variable">$node</span> |grep cache |wc <span class="literal">-l</span>`</span><br><span class="line">gw=`$kscinfo_path/./kscinfo.py <span class="literal">-l</span> <span class="literal">-e</span> node=<span class="variable">$node</span> |grep relay01 |awk <span class="operator">-F</span> <span class="string">&quot;|&quot;</span> <span class="string">&#x27;&#123;print$8&#125;&#x27;</span>|cut <span class="literal">-d</span> . <span class="operator">-f</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>`</span><br><span class="line">frp_server_path=/root/frp_0.<span class="number">33.0</span>_linux_amd64   <span class="comment">#frp安装包位置</span></span><br><span class="line">back_file_dir=<span class="variable">$home_path</span>/frp_test      <span class="comment">#frp文件生成位置</span></span><br><span class="line">frp_package=<span class="variable">$home_path</span>/package/frp_0.<span class="number">33.0</span>_linux_amd64.tar.gz</span><br><span class="line">password=<span class="string">&#x27;k*******cdn&#x27;</span></span><br><span class="line">source /etc/init.d/functions</span><br><span class="line"></span><br><span class="line">[ -<span class="type">d</span> <span class="variable">$back_file_dir</span> ] || mkdir <span class="literal">-p</span> <span class="variable">$back_file_dir</span>  <span class="comment">#判断目录是否存在，不存在就创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#relay IP</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$relay_out_ip</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span>&gt;&gt;<span class="variable">$back_file_dir</span>/relay_out_ip.txt</span><br><span class="line">done</span><br><span class="line">array2=(<span class="variable">$</span>(<span class="built_in">cat</span> <span class="variable">$back_file_dir</span>/relay_out_ip.txt))   <span class="comment">#将获取到的值存入到数组中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt; <span class="variable">$back_file_dir</span>/relay_out_ip.txt      <span class="comment">#清理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#out_ip数组</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$cache_out_ip</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span>&gt;&gt;<span class="variable">$back_file_dir</span>/out_ip.txt</span><br><span class="line">done</span><br><span class="line">array=(<span class="variable">$</span>(<span class="built_in">cat</span> <span class="variable">$back_file_dir</span>/out_ip.txt))   <span class="comment">#将获取到的值存入到数组中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt; <span class="variable">$back_file_dir</span>/out_ip.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#ip_ip数组</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$cache_in_ip</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span>&gt;&gt;<span class="variable">$back_file_dir</span>/in_ip.txt</span><br><span class="line">done</span><br><span class="line">array1=(<span class="variable">$</span>(<span class="built_in">cat</span> <span class="variable">$back_file_dir</span>/in_ip.txt))   <span class="comment">#将获取到的值存入到数组中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt; <span class="variable">$back_file_dir</span>/in_ip.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment">#格式化输出以下菜单</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;EOF        </span><br><span class="line">              <span class="literal">-----------------------------</span>菜单<span class="literal">----------------------------------</span></span><br><span class="line">              -              <span class="number">1</span>.生成frp服务端frps.ini文件                        -</span><br><span class="line">              -              <span class="number">2</span>.生成frp客户端frpc.ini文件                        -</span><br><span class="line">              -              <span class="number">3</span>.安装frp                                          -</span><br><span class="line">              -              <span class="number">4</span>.发送frp文件到对应服务器                          -</span><br><span class="line">              -              <span class="number">5</span>.启动frp服务并生成/etc/rc.local文件               -</span><br><span class="line">              -              <span class="number">6</span>.退出                                             -  </span><br><span class="line">              <span class="literal">------------------------------------------------------------------</span></span><br><span class="line">EOF</span><br><span class="line"><span class="comment">#接受用户输入的一个值</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入你要执行的操作：&gt;&gt;&gt;&quot;</span> num</span><br><span class="line"><span class="comment">#服务端frp配置</span></span><br><span class="line">Server()&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;[common] \nbind_addr = <span class="variable">$</span>&#123;array2[0]&#125; \nbind_port = 7000 \n# auth \nauthentication_method = token \ntoken = kingsoft&quot;</span>&gt; <span class="variable">$back_file_dir</span>/frps.ini</span><br><span class="line"><span class="comment">#echo `sudo chown 1000:dorguard $home_path/test_sh/frps.ini `</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sudo chown root:root $home_path/test_sh/frps.ini </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;配置文件权限已修改&quot;</span></span><br><span class="line"><span class="comment">#echo &quot;服务端frps.ini文件已生成($back_file_dir)&quot;</span></span><br><span class="line">action  <span class="string">&quot;服务端frps.ini文件已生成(<span class="variable">$back_file_dir</span>)&quot;</span>    /bin/true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端frp配置</span></span><br><span class="line">Client()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;客户端生成文件中&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;[common]</span></span><br><span class="line"><span class="string">server_addr = <span class="variable">$</span>&#123;array2[0]&#125;</span></span><br><span class="line"><span class="string">server_port = 7000</span></span><br><span class="line"><span class="string">login_fail_exit = false</span></span><br><span class="line"><span class="string"># auth</span></span><br><span class="line"><span class="string">authentication_method = token</span></span><br><span class="line"><span class="string">token = kingsoft&quot;</span>&gt;<span class="variable">$back_file_dir</span>/frpc.ini</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new=`echo <span class="variable">$cache_num</span>+<span class="number">1</span> |bc`</span><br><span class="line">x=<span class="number">1</span></span><br><span class="line">y=<span class="number">0</span></span><br><span class="line">m=`echo <span class="variable">$cache_num</span><span class="literal">-9</span> |bc`</span><br><span class="line">teng=<span class="number">8</span>     <span class="comment">#定义一个变量，用于后面不去匹配</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$x</span> -<span class="type">lt</span> <span class="variable">$new</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="keyword">while</span> [ <span class="variable">$y</span> -<span class="type">lt</span> <span class="variable">$cache_num</span> ]</span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$m</span> -<span class="type">le</span> <span class="number">0</span> ]      <span class="comment">#cache节点小于等于9执行</span></span><br><span class="line">then</span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;[ssh-cache0<span class="variable">$x</span>]</span></span><br><span class="line"><span class="string">type = tcp</span></span><br><span class="line"><span class="string">local_ip = <span class="variable">$</span>&#123;array1[<span class="variable">$y</span>]&#125;</span></span><br><span class="line"><span class="string">local_port = 22</span></span><br><span class="line"><span class="string">remote_port = 2200<span class="variable">$x</span>&quot;</span>&gt;&gt;<span class="variable">$back_file_dir</span>/frpc.ini</span><br><span class="line">let y+=<span class="number">1</span></span><br><span class="line">        <span class="comment">#continue </span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        elif [ <span class="variable">$m</span> -<span class="type">gt</span> <span class="number">0</span> ] &amp;&amp; [ <span class="variable">$teng</span> -<span class="type">eq</span> <span class="number">8</span> ]  <span class="comment">#cache节点大于9 (执行cache的前9个)  第一次声明teng变量为8   后面定义局部变量为4时，不在匹配此条</span></span><br><span class="line">then</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;[ssh-cache0<span class="variable">$x</span>]</span></span><br><span class="line"><span class="string">type = tcp</span></span><br><span class="line"><span class="string">local_ip = <span class="variable">$</span>&#123;array1[<span class="variable">$y</span>]&#125;</span></span><br><span class="line"><span class="string">local_port = 22</span></span><br><span class="line"><span class="string">remote_port = 2200<span class="variable">$x</span>&quot;</span>&gt;&gt;<span class="variable">$back_file_dir</span>/frpc.ini</span><br><span class="line">let y+=<span class="number">1</span></span><br><span class="line">let x+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$x</span> -<span class="type">eq</span> <span class="number">10</span> ]    <span class="comment">#当cache等于10时  跳出循环  跳到-------》</span></span><br><span class="line">then</span><br><span class="line"><span class="keyword">break</span> </span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>    <span class="comment">#cache节点大于9(执行cache9之后的所有cache)</span></span><br><span class="line">        <span class="comment">#m=$cache_num-9</span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">9</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$a</span> -<span class="type">lt</span> <span class="variable">$new</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     <span class="keyword">while</span> [ <span class="variable">$b</span> -<span class="type">lt</span> <span class="variable">$cache_num</span> ]</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">             <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;[ssh-cache<span class="variable">$a</span>]</span></span><br><span class="line"><span class="string">type = tcp</span></span><br><span class="line"><span class="string">local_ip = <span class="variable">$</span>&#123;array1[<span class="variable">$b</span>]&#125;</span></span><br><span class="line"><span class="string">local_port = 22</span></span><br><span class="line"><span class="string">remote_port = 220<span class="variable">$a</span>&quot;</span>&gt;&gt;<span class="variable">$back_file_dir</span>/frpc.ini</span><br><span class="line">let b+=<span class="number">1</span></span><br><span class="line">        let a+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -<span class="type">eq</span> <span class="variable">$new</span> ]    <span class="comment">#匹配到直接退出程序   ps:程序死循环了，跳不出去了，后期优化</span></span><br><span class="line">then</span><br><span class="line">            action  <span class="string">&quot;客户端配置文件已生成(<span class="variable">$back_file_dir</span>)&quot;</span>    /bin/true</span><br><span class="line">    <span class="keyword">exit</span></span><br><span class="line">fi</span><br><span class="line">    done</span><br><span class="line">    </span><br><span class="line">done</span><br><span class="line">fi</span><br><span class="line">   done</span><br><span class="line">   </span><br><span class="line">   teng=<span class="number">4</span>     <span class="comment"># ----------》跳到了这里 赋予局部变量</span></span><br><span class="line">   let x+=<span class="number">1</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment">#echo &quot;客户端配置文件已生成($back_file_dir)&quot;</span></span><br><span class="line">action  <span class="string">&quot;客户端配置文件已生成(<span class="variable">$back_file_dir</span>)&quot;</span>    /bin/true</span><br><span class="line"><span class="comment">#####################################################################</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#发送frp安装包</span></span><br><span class="line">Package()&#123;</span><br><span class="line">sshpass <span class="literal">-p</span> <span class="variable">$password</span> scp <span class="literal">-p</span> <span class="literal">-o</span> StrictHostKeyChecking=no <span class="variable">$frp_package</span> root<span class="selector-tag">@</span><span class="variable">$</span>&#123;array2[<span class="number">0</span>]&#125;:/root</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   action  <span class="string">&quot;frp安装包已发送至服务端:<span class="variable">$</span>&#123;array2[0]&#125;&quot;</span>    /bin/true</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">sshpass <span class="literal">-p</span> <span class="variable">$password</span> scp <span class="literal">-p</span> <span class="literal">-o</span> StrictHostKeyChecking=no <span class="variable">$frp_package</span> root<span class="selector-tag">@</span><span class="variable">$</span>&#123;array2[<span class="number">1</span>]&#125;:/root</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   action  <span class="string">&quot;frp安装包已发送至客户端:<span class="variable">$</span>&#123;array2[1]&#125;&quot;</span>    /bin/true</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">expect=`rpm <span class="literal">-qa</span> |grep expect`</span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">z</span> <span class="variable">$expect</span> ];then</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;检测到你未安装expect模块，现在进行安装。。。&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">    yum install expect <span class="literal">-y</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;您已安装expect模块，接下来进行解压安装包&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line">/usr/bin/expect &lt;&lt;EOF</span><br><span class="line">    spawn ssh root<span class="selector-tag">@</span><span class="variable">$</span>&#123;array2[<span class="number">0</span>]&#125;</span><br><span class="line">    expect &#123;</span><br><span class="line">        <span class="string">&quot;*yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>; exp_continue &#125;</span><br><span class="line">        <span class="string">&quot;*password:&quot;</span> &#123; send <span class="string">&quot;ksyun_cdn\r&quot;</span>; exp_continue &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;tar -zxf /root/frp_0.33.0_linux_amd64.tar.gz -C /root\r&quot;</span></span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;exit\r&quot;</span></span><br><span class="line">    expect eof</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">sleep</span> <span class="number">3</span></span><br><span class="line">/usr/bin/expect &lt;&lt;EOF</span><br><span class="line">    spawn ssh root<span class="selector-tag">@</span><span class="variable">$</span>&#123;array2[<span class="number">1</span>]&#125;</span><br><span class="line">    expect &#123;</span><br><span class="line">        <span class="string">&quot;*yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>; exp_continue &#125;</span><br><span class="line">        <span class="string">&quot;*password:&quot;</span> &#123; send <span class="string">&quot;ksyun_cdn\r&quot;</span>; exp_continue &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;tar -zxf /root/frp_0.33.0_linux_amd64.tar.gz -C /root\r&quot;</span></span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;exit\r&quot;</span></span><br><span class="line">    expect eof</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MEM()&#123; </span><br><span class="line"></span><br><span class="line">which sshpass &amp;&gt;/dev/null     <span class="comment">#确定sshpass是否安装，服务器可能没有安装</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">ne</span> <span class="number">0</span> ]               <span class="comment">#通过which命令判断sshpass是否安装，安装了echo $?则返回0</span></span><br><span class="line">then                          <span class="comment">#$?不为0时，则说明没有安装</span></span><br><span class="line">yum install sshpass <span class="literal">-y</span></span><br><span class="line"></span><br><span class="line">sshpass <span class="literal">-p</span> <span class="variable">$password</span> scp <span class="literal">-p</span> <span class="literal">-o</span> StrictHostKeyChecking=no <span class="variable">$back_file_dir</span>/frps.ini root<span class="selector-tag">@</span><span class="variable">$</span>&#123;array2[<span class="number">0</span>]&#125;:<span class="variable">$frp_server_path</span>             </span><br><span class="line"> <span class="comment">#使用sshpass工具和-o参数实现避免交互输入yes和密码</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">  <span class="comment"># echo &quot;frps.ini文件以发送至服务端:$&#123;array2[0]&#125;&quot;</span></span><br><span class="line">   action  <span class="string">&quot;frps.ini文件以发送至服务端:<span class="variable">$</span>&#123;array2[0]&#125;&quot;</span>    /bin/true</span><br><span class="line">fi</span><br><span class="line">sshpass <span class="literal">-p</span> <span class="variable">$password</span> scp <span class="literal">-p</span> <span class="literal">-o</span> StrictHostKeyChecking=no <span class="variable">$back_file_dir</span>/frpsc.ini root<span class="selector-tag">@</span><span class="variable">$</span>&#123;array2[<span class="number">1</span>]&#125;:<span class="variable">$frp_server_path</span>             </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="comment">#echo &quot;frpc.ini文件以发送至客户端:$&#123;array2[1]&#125;&quot;</span></span><br><span class="line">   action  <span class="string">&quot;frpc.ini文件以发送至客户端:<span class="variable">$</span>&#123;array2[1]&#125;&quot;</span>    /bin/true</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sshpass <span class="literal">-p</span> <span class="variable">$password</span> scp <span class="literal">-p</span> <span class="literal">-o</span> StrictHostKeyChecking=no <span class="variable">$back_file_dir</span>/frps.ini root<span class="selector-tag">@</span><span class="variable">$</span>&#123;array2[<span class="number">0</span>]&#125;:<span class="variable">$frp_server_path</span></span><br><span class="line"> <span class="comment">#使用sshpass工具和-o参数实现避免交互输入yes和密码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="comment">#echo &quot;frps.ini文件以发送至服务端:$&#123;array2[0]&#125;&quot;</span></span><br><span class="line">   action  <span class="string">&quot;frps.ini文件以发送至服务端:<span class="variable">$</span>&#123;array2[0]&#125;&quot;</span>    /bin/true</span><br><span class="line">fi</span><br><span class="line">sshpass <span class="literal">-p</span> <span class="variable">$password</span> scp <span class="literal">-p</span> <span class="literal">-o</span> StrictHostKeyChecking=no <span class="variable">$back_file_dir</span>/frpc.ini  root<span class="selector-tag">@</span><span class="variable">$</span>&#123;array2[<span class="number">1</span>]&#125;:<span class="variable">$frp_server_path</span>             </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="comment">#echo &quot;frpc.ini文件以发送至客户端:$&#123;array2[1]&#125;&quot;</span></span><br><span class="line">   action  <span class="string">&quot;frpc.ini文件以发送至客户端:<span class="variable">$</span>&#123;array2[1]&#125;&quot;</span>    /bin/true</span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Send()&#123;</span><br><span class="line"><span class="comment">#执行检测并安装expect模块</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;/root/frp_0.33.0_linux_amd64/frps  -c /root/frp_0.33.0_linux_amd64/frps.ini &amp;</span></span><br><span class="line"><span class="string">route add -net 172.16.200.0 netmask 255.255.255.0 gw <span class="variable">$gw</span>.254&quot;</span>&gt;<span class="variable">$back_file_dir</span>/frps_local.txt</span><br><span class="line">sshpass <span class="literal">-p</span> <span class="variable">$password</span> scp <span class="literal">-p</span> <span class="literal">-o</span> StrictHostKeyChecking=no <span class="variable">$back_file_dir</span>/frps_local.txt root<span class="selector-tag">@</span><span class="variable">$</span>&#123;array2[<span class="number">0</span>]&#125;:/tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;/frps_local.txt文件以发送至服务端&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;/root/frp_0.33.0_linux_amd64/frpc  -c /root/frp_0.33.0_linux_amd64/frpc.ini &amp;</span></span><br><span class="line"><span class="string">route add -net 172.16.200.0 netmask 255.255.255.0 gw <span class="variable">$gw</span>.254&quot;</span>&gt;<span class="variable">$back_file_dir</span>/frpc_local.txt</span><br><span class="line">sshpass <span class="literal">-p</span> <span class="variable">$password</span> scp <span class="literal">-p</span> <span class="literal">-o</span> StrictHostKeyChecking=no <span class="variable">$back_file_dir</span>/frpc_local.txt root<span class="selector-tag">@</span><span class="variable">$</span>&#123;array2[<span class="number">1</span>]&#125;:/tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;/frpc_local.txt文件以发送至客户端&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">expect=`rpm <span class="literal">-qa</span> |grep expect`</span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">z</span> <span class="variable">$expect</span> ];then</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;检测到你未安装expect模块，现在进行安装。。。&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">    yum install expect <span class="literal">-y</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;您已安装expect模块，接下来进行修改对方/etc/rc.local文件&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line">/usr/bin/expect &lt;&lt;EOF</span><br><span class="line">    spawn ssh root<span class="selector-tag">@</span><span class="variable">$</span>&#123;array2[<span class="number">0</span>]&#125;</span><br><span class="line">    expect &#123;</span><br><span class="line">        <span class="string">&quot;*yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>; exp_continue &#125;</span><br><span class="line">        <span class="string">&quot;*password:&quot;</span> &#123; send <span class="string">&quot;ksyun_cdn\r&quot;</span>; exp_continue &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;cat /tmp/frps_local.txt &gt;&gt;/etc/rc.local\r&quot;</span></span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;rm -rf /tmp/frps_local.txt\r&quot;</span></span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;/root/frp_0.33.0_linux_amd64/frps  -c /root/frp_0.33.0_linux_amd64/frps.ini &amp;\r&quot;</span></span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;route add -net 172.16.200.0 netmask 255.255.255.0 gw <span class="variable">$gw</span>.254\r&quot;</span></span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;date\r &quot;</span></span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;exit\r&quot;</span></span><br><span class="line">    expect eof</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">sleep</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">/usr/bin/expect &lt;&lt;EOF</span><br><span class="line">    spawn ssh root<span class="selector-tag">@</span><span class="variable">$</span>&#123;array2[<span class="number">1</span>]&#125;</span><br><span class="line">    expect &#123;</span><br><span class="line">        <span class="string">&quot;*yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>; exp_continue &#125;</span><br><span class="line">        <span class="string">&quot;*password:&quot;</span> &#123; send <span class="string">&quot;ksyun_cdn\r&quot;</span>; exp_continue &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;cat /tmp/frpc_local.txt &gt;&gt;/etc/rc.local\r&quot;</span></span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;rm -rf /tmp/frpc_local.txt\r&quot;</span></span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;/root/frp_0.33.0_linux_amd64/frpc  -c /root/frp_0.33.0_linux_amd64/frpc.ini &amp;\r&quot;</span></span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;route add -net 172.16.200.0 netmask 255.255.255.0 gw <span class="variable">$gw</span>.254\r&quot;</span></span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;date\r &quot;</span></span><br><span class="line">    expect <span class="string">&quot;*]#&quot;</span></span><br><span class="line">    send <span class="string">&quot;exit\r&quot;</span></span><br><span class="line">    expect eof</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用case语句捕获用户键入的值。</span></span><br><span class="line"><span class="comment">#模式匹配成功，则执行相应函数。</span></span><br><span class="line">case <span class="variable">$num</span> <span class="keyword">in</span></span><br><span class="line">   <span class="number">1</span>)        </span><br><span class="line">   Server</span><br><span class="line">   ;;</span><br><span class="line">   <span class="number">2</span>)</span><br><span class="line">   Client</span><br><span class="line">   ;;</span><br><span class="line">   <span class="number">3</span>)</span><br><span class="line">   Package</span><br><span class="line">   ;;</span><br><span class="line">   <span class="number">4</span>)</span><br><span class="line">   MEM</span><br><span class="line">   ;;</span><br><span class="line">   <span class="number">5</span>)</span><br><span class="line">   Send</span><br><span class="line">   ;;</span><br><span class="line">   <span class="number">6</span>|q)</span><br><span class="line">   <span class="keyword">exit</span> <span class="number">0</span></span><br><span class="line">   ;;</span><br><span class="line">   *)</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;请输入正确的参数...&quot;</span></span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adsl脚本实现一键式拨号以及vnc一键式安装</title>
      <link href="/post/003.html"/>
      <url>/post/003.html</url>
      
        <content type="html"><![CDATA[<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>基于adsl多拨安装步骤文档，若使用该文档进行拨号安装，需要手动执行的地方太多了，每执行一步，就需要运行相应的脚本，比较繁琐，容易混乱。</p><p>该脚本中所涉及到的功能在此脚本中均已实现，通过此脚本进行拨号可以大大减少出错的概率，以及减少相应的时间</p><p><strong>操作细节</strong>：<br>1、将此脚本copy至对应服务器中</p><p>   2、第一次拨号须在家目录下创建&#x2F;adsl_test目录，进入目录，创建   1.txt   文件（该文件是第一次拨号文件）</p><p>   3、删除多余拨号资源须在&#x2F;adsl_test&#x2F;3.txt 文件中写入需要删除的账号 （该文件是需要删除的文件，需要和拨号账号一一对应）</p><p>   4、增加新的拨号资源须在&#x2F;adsl_test&#x2F;2.txt 文件中写入需要增加的账号   （若增加的拨号资源是之前的旧资源，只不过需要改某些地方，则先执行删除账号后，在进行添加）</p><p>   5、拨上号之后需等上一些时间等待拨号</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Author:teng</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line">home_path=`pwd`</span><br><span class="line">back_file_dir=<span class="variable">$home_path</span>/adsl_test      <span class="comment">#文件位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment">#格式化输出以下菜单</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;EOF        </span><br><span class="line">              <span class="literal">-----------------------------</span>菜单<span class="literal">----------------------------------</span></span><br><span class="line">              -              <span class="number">1</span>.首次添加拨号资源文件                             -</span><br><span class="line">              -              <span class="number">2</span>.查看网卡拨号情况                                 -</span><br><span class="line">              -              <span class="number">3</span>.二次添加拨号资源(此功能尽量少用)                 -</span><br><span class="line">              -              <span class="number">4</span>.删除多余拨号资源(此功能尽量少用)                 -</span><br><span class="line">              -              <span class="number">5</span>.启用账号                                         -</span><br><span class="line">              -              <span class="number">6</span>.暂停账号                                         -</span><br><span class="line">              -              <span class="number">7</span>.查看当前某个账号暂停或者启用                     -</span><br><span class="line">              -              <span class="number">8</span>.退出(q)                                          -</span><br><span class="line">              -              <span class="number">9</span>.删除脚本                                         -</span><br><span class="line">              -注：                                                             -</span><br><span class="line">              -机器故障重启，重启完成后，<span class="number">2</span>分钟左右，会完成自动拨号（保证挂载网卡-</span><br><span class="line">              -为eth0的情况下）。                                               -</span><br><span class="line">              -每天<span class="number">5</span>:<span class="number">30</span>分所有网卡会重新拨号。                                   -</span><br><span class="line">              -首次添加拨号资源先自行创建<span class="variable">$back_file_dir</span>/<span class="number">1</span>.txt文件               -</span><br><span class="line">              -二次添加拨号资源先自行创建<span class="variable">$back_file_dir</span>/<span class="number">2</span>.txt文件               -</span><br><span class="line">              -删除多余拨号资源先自行创建<span class="variable">$back_file_dir</span>/<span class="number">3</span>.txt文件               -</span><br><span class="line">              <span class="literal">-------------------------------------------------------------------</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#接受用户输入的一个值</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入你要执行的操作：&gt;&gt;&gt;&quot;</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action()&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;进入adsl多拨初始化&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;即将进行解压压缩包&quot;</span></span><br><span class="line">tar xzvf adsl_multidial.tar0319.gz</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;解压完成&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;进入adsl_multidial目录&quot;</span></span><br><span class="line"><span class="built_in">cd</span> adsl_multidial</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在执行初始化脚本&quot;</span></span><br><span class="line">sh init.sh &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;初始化完成&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[ -<span class="type">d</span> <span class="variable">$back_file_dir</span> ] || mkdir <span class="literal">-p</span> <span class="variable">$back_file_dir</span></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">f</span> <span class="variable">$back_file_dir</span>/<span class="number">1</span><span class="type">.txt</span> ]</span><br><span class="line">then</span><br><span class="line"><span class="comment">#cat $back_file_dir/1.txt | while read txt</span></span><br><span class="line"><span class="comment">#do</span></span><br><span class="line"><span class="comment">#  echo &quot;正在添加拨号资源&quot;</span></span><br><span class="line"><span class="comment">#  $txt&gt;&gt;/Application/multidial/pcdn/adslaccount.txt</span></span><br><span class="line"><span class="comment">#  sleep 1</span></span><br><span class="line"><span class="comment">#  echo &quot;拨号资源添加完成&quot;</span></span><br><span class="line"><span class="comment">#done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> <span class="variable">$back_file_dir</span>/<span class="number">1</span>.txt /Application/multidial/pcdn/adslaccount.txt</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;拨号资源添加完成&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /Application/multidial</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在执行adsl_init.sh脚本&quot;</span></span><br><span class="line">sh adsl_init.sh eth0 &amp;&gt; /dev/null</span><br><span class="line"><span class="built_in">sleep</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;adsl_init.sh脚本执行完毕&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /Application/multidial</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在执行adsl_iprule.sh脚本&quot;</span></span><br><span class="line">sh adsl_iprule  &amp;&gt; /dev/null</span><br><span class="line"><span class="built_in">sleep</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;adsl_iprule.sh脚本执行完毕&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;即将启动adslcheck服务&quot;</span></span><br><span class="line">systemctl daemon<span class="literal">-reload</span> &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;写入服务重启成功&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">start</span> adslcheck.service &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;adslcheck服务启动完成&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;adslcheck服务启动失败&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">#systemctl status adslcheck.service $&gt; /dev/null</span></span><br><span class="line"><span class="comment">#if [ $? -eq 0 ]</span></span><br><span class="line"><span class="comment">#then</span></span><br><span class="line"><span class="comment">#   echo &quot;adslcheck服务状态: active&quot;</span></span><br><span class="line"><span class="comment">#else</span></span><br><span class="line"><span class="comment">#   echo &quot;adslcheck服务状态：失败&quot;</span></span><br><span class="line"><span class="comment">#fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sleep</span> <span class="number">5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;查看网卡拨号情况&quot;</span></span><br><span class="line"><span class="built_in">cat</span> /Application/multidial/pcdn/log/information_log.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;若要添加拨号,请先创建<span class="variable">$back_file_dir</span>/1.txt文件&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看拨号资源情况</span></span><br><span class="line">See()&#123;</span><br><span class="line"><span class="built_in">cat</span> /Application/multidial/pcdn/log/information_log.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Add()&#123;</span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">f</span> <span class="variable">$back_file_dir</span>/<span class="number">2</span><span class="type">.txt</span> ]</span><br><span class="line">then</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;正在批量导入添加拨号&quot;</span></span><br><span class="line">    <span class="built_in">cp</span> <span class="variable">$back_file_dir</span>/<span class="number">2</span>.txt /Application/multidial/pcdn/add_del/add_account.txt</span><br><span class="line">    <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">    sh /Application/multidial/adsl_op.sh &amp;&gt;/dev/null</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;拨号资源添加完成&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="string">&quot;若要添加新的拨号,请先创建<span class="variable">$back_file_dir</span>/2.txt文件&quot;</span></span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Delete()&#123;</span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">f</span> <span class="variable">$back_file_dir</span>/<span class="number">3</span><span class="type">.txt</span> ]</span><br><span class="line">then</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;正在批量导入删除拨号&quot;</span></span><br><span class="line">    <span class="built_in">cp</span> <span class="variable">$back_file_dir</span>/<span class="number">3</span>.txt /Application/multidial/pcdn/add_del/del_account.txt</span><br><span class="line">    <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">    sh /Application/multidial/adsl_op.sh &amp;&gt;/dev/null</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;拨号资源添加完成&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="string">&quot;若要删除已存在拨号,请先创建<span class="variable">$back_file_dir</span>/3.txt文件&quot;</span></span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Start</span>()&#123;</span><br><span class="line">source /etc/init.d/functions</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /Application/multidial</span><br><span class="line">sh adsl_on_off.sh <span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">    action  <span class="string">&quot;账号已启用!&quot;</span>    /bin/true</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   action   <span class="string">&quot;账号启用失败&quot;</span>   /bin/false</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stop()&#123;</span><br><span class="line">source /etc/init.d/functions</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /Application/multidial</span><br><span class="line">sh adsl_on_off.sh <span class="number">6</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">    action  <span class="string">&quot;账号已暂停!&quot;</span>    /bin/true</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   action   <span class="string">&quot;账号暂停失败&quot;</span>   /bin/false</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Cat</span>()&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;第5列是0的账号为暂停，是1的账号为启动&quot;</span></span><br><span class="line">   <span class="built_in">cat</span> /Application/multidial/pcdn/adslaccount.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Del</span>()&#123;</span><br><span class="line">   <span class="built_in">rm</span> <span class="literal">-rf</span> /root/adsl_test   /root/adsl.sh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用case语句捕获用户键入的值。</span></span><br><span class="line"><span class="comment">#模式匹配成功，则执行相应函数。</span></span><br><span class="line">case <span class="variable">$num</span> <span class="keyword">in</span></span><br><span class="line">   <span class="number">1</span>)</span><br><span class="line">   Action</span><br><span class="line">   ;;</span><br><span class="line">   <span class="number">2</span>)</span><br><span class="line">   See</span><br><span class="line">   ;;</span><br><span class="line">   <span class="number">3</span>)</span><br><span class="line">   Add</span><br><span class="line">   ;;</span><br><span class="line">   <span class="number">4</span>)</span><br><span class="line">   Delete</span><br><span class="line">   ;;</span><br><span class="line">   <span class="number">5</span>)</span><br><span class="line">   <span class="built_in">Start</span></span><br><span class="line">   ;;</span><br><span class="line">   <span class="number">6</span>)</span><br><span class="line">   Stop</span><br><span class="line">   ;;</span><br><span class="line">   <span class="number">7</span>)</span><br><span class="line">   <span class="built_in">Cat</span></span><br><span class="line">   ;;</span><br><span class="line">   <span class="number">8</span>|q)</span><br><span class="line">   <span class="keyword">exit</span> <span class="number">0</span></span><br><span class="line">   ;;</span><br><span class="line">   <span class="number">9</span>)</span><br><span class="line">   <span class="built_in">Del</span></span><br><span class="line">   ;;</span><br><span class="line">   *)</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;请输入正确的参数...&quot;</span></span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="vnc脚本实现一键式安装以及修改vnc密码"><a href="#vnc脚本实现一键式安装以及修改vnc密码" class="headerlink" title="vnc脚本实现一键式安装以及修改vnc密码"></a>vnc脚本实现一键式安装以及修改vnc密码</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Author:teng</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#VNC_IP=`ip a |grep &quot;global eth0&quot;|awk &#x27;&#123;print $2&#125;&#x27;|cut -d / -f 1` #获取vnc服务器IP</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;准备安装gnome桌面&quot;</span></span><br><span class="line"><span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">yum groupinstall <span class="literal">-y</span> <span class="string">&quot;GNOME Desktop&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="built_in">echo</span>  <span class="string">&quot;安装完成，修改默认启动方式为图形化界面&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;gnome桌面安装失败&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;重新进行安装&quot;</span></span><br><span class="line">   <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">   yum groupinstall <span class="literal">-y</span> <span class="string">&quot;GNOME Desktop&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">  then</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;安装完成，修改默认启动方式为图形化界面&quot;</span></span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;设置成图形模式&quot;</span></span><br><span class="line">systemctl <span class="built_in">set-default</span> graphical.target </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;图形模式设置成功&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;即将进入安装vnc服务&quot;</span></span><br><span class="line"><span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">yum install tigervnc<span class="literal">-server</span> <span class="literal">-y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;vnc服务安装完成&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;vnc服务安装失败&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;复制一个服务设置的模板&quot;</span></span><br><span class="line"><span class="built_in">cp</span> /lib/systemd/system/vncserver<span class="selector-tag">@</span>.service /etc/systemd/system/vncserver<span class="selector-tag">@</span>:<span class="number">1</span>.service</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;修改服务配置&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;[Unit]</span></span><br><span class="line"><span class="string">Description=Remote desktop service (VNC)</span></span><br><span class="line"><span class="string">After=syslog.target network.target</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">User=root</span></span><br><span class="line"><span class="string"># Clean any existing files in /tmp/.X11-unix environment</span></span><br><span class="line"><span class="string">ExecStartPre=-/usr/bin/vncserver -kill %i</span></span><br><span class="line"><span class="string">ExecStart=/sbin/runuser -l root -c &quot;</span>/usr/bin/vncserver %i<span class="string">&quot;</span></span><br><span class="line"><span class="string">PIDFile=/root/.vnc/%H%i.pid</span></span><br><span class="line"><span class="string">ExecStop=-/usr/bin/vncserver -kill %i</span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target&quot;</span>&gt;/etc/systemd/system/vncserver<span class="selector-tag">@</span>\:<span class="number">1</span>.service</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">  <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;服务配置修改完成&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行检测并安装expect模块</span></span><br><span class="line">expect=`rpm <span class="literal">-qa</span> |grep expect`</span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">z</span> <span class="variable">$expect</span> ];then</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;检测到你未安装expect模块，现在进行安装。。。&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">    yum install expect <span class="literal">-y</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;您已安装expect模块，接下来进行修改vnc密码&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#     /usr/bin/expect &lt;&lt;-EOF</span></span><br><span class="line"><span class="comment">#    spawn ssh root@$VNC_IP  &quot;vncpasswd&quot;</span></span><br><span class="line"><span class="comment">#    expect &#123;</span></span><br><span class="line"><span class="comment">#        &quot;*yes/no&quot; &#123; send &quot;yes\r&quot;; exp_continue &#125;</span></span><br><span class="line"><span class="comment">#        &quot;*password&quot; &#123; send &quot;*****\r&quot;; exp_continue &#125;</span></span><br><span class="line"><span class="comment">#        &quot;Password:&quot; &#123; send &quot;*****\r&quot;; exp_continue &#125;</span></span><br><span class="line"><span class="comment">#        &quot;Verify:&quot; &#123; send &quot;****\r&quot;; exp_continue &#125;</span></span><br><span class="line"><span class="comment">#        &quot;Would you like to enter a view-only password (y/n)?&quot; &#123; send &quot;n\r&quot;; exp_continue &#125;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"><span class="comment">#    expect eof</span></span><br><span class="line"><span class="comment">#EOF</span></span><br><span class="line">/usr/bin/expect  &lt;&lt;EOF</span><br><span class="line"><span class="built_in">set</span> timeout <span class="number">10</span></span><br><span class="line">spawn vncpasswd    </span><br><span class="line">expect <span class="string">&quot;Password:&quot;</span> </span><br><span class="line">send <span class="string">&quot;k**\n&quot;</span>    </span><br><span class="line">expect <span class="string">&quot;Verify:&quot;</span></span><br><span class="line">send <span class="string">&quot;k**\n&quot;</span></span><br><span class="line">expect <span class="string">&quot;Would you like to enter a view-only password (y/n)?&quot;</span></span><br><span class="line">send <span class="string">&quot;n\n&quot;</span></span><br><span class="line">interact          </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;vnc密码修改完成，密码为ks***,端口为5901&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;vnc密码修改失败&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;启动vnc服务，开通端口&quot;</span></span><br><span class="line">systemctl <span class="built_in">start</span> vncserver<span class="selector-tag">@</span>:<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;vnc服务已启动&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;vnc服务启动失败&quot;</span></span><br><span class="line">fi</span><br><span class="line">          </span><br></pre></td></tr></table></figure><h1 id="如何实现分发不同账号资源至多个文件"><a href="#如何实现分发不同账号资源至多个文件" class="headerlink" title="如何实现分发不同账号资源至多个文件"></a>如何实现分发不同账号资源至多个文件</h1><p>自动分发资源到不同文件解决思路：（遍历sed依次取出每行追加至相应文件）<br>若整除，则平均分配。若有余，则先平均分，分完后在分余数。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Author:Teng</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line">home_path=`pwd`</span><br><span class="line">back_file=<span class="variable">$home_path</span>/ansible_ppp/file/think</span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;输入拨号资源总行数:&quot;</span> all_num</span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;输入每台机器的拨号资源:&quot;</span> once_num</span><br><span class="line"></span><br><span class="line">group_num=`echo <span class="variable">$all_num</span>/<span class="variable">$once_num</span> |bc`</span><br><span class="line">num=`echo <span class="variable">$all_num</span>%<span class="variable">$once_num</span> |bc`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;需要cache设备:<span class="variable">$group_num</span>&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;余数:<span class="variable">$num</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> <span class="variable">$back_file</span>/cache*    <span class="comment">#清理之前生成的cache文件，避免产生影响</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$back_file</span>/cache文件已清理</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">m=<span class="number">1</span></span><br><span class="line">C=p  </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$a</span> -<span class="type">le</span> <span class="variable">$group_num</span> ]    </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">n=`echo <span class="variable">$a</span>*<span class="variable">$once_num</span>|bc`  </span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> `seq <span class="variable">$m</span> <span class="variable">$n</span>`</span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">     sed <span class="literal">-n</span>  <span class="variable">$i</span><span class="variable">$C</span>  <span class="variable">$back_file</span>/adsl_num.txt &gt;&gt; <span class="variable">$back_file</span>/cache<span class="variable">$a</span></span><br><span class="line"></span><br><span class="line">   done</span><br><span class="line"></span><br><span class="line">let m+=<span class="variable">$once_num</span>   </span><br><span class="line">let a+=<span class="number">1</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num</span> -<span class="type">ne</span> <span class="number">0</span> ]    <span class="comment">#判断拨号资源是否被平均分配</span></span><br><span class="line">then</span><br><span class="line">   x=`echo <span class="variable">$group_num</span>*<span class="variable">$once_num</span>+<span class="number">1</span>|bc` </span><br><span class="line">   k=<span class="number">1</span></span><br><span class="line">  <span class="comment"># while [ $k -le $num ]</span></span><br><span class="line">  <span class="comment"># do</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> `seq <span class="variable">$x</span> <span class="variable">$all_num</span>`     <span class="comment">#获取余数分别追加至文件</span></span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">   sed <span class="literal">-n</span>  <span class="variable">$i</span><span class="variable">$C</span>  <span class="variable">$back_file</span>/adsl_num.txt  &gt;&gt; <span class="variable">$back_file</span>/cache<span class="variable">$k</span></span><br><span class="line">   let k+=<span class="number">1</span></span><br><span class="line">   done</span><br><span class="line">fi</span><br><span class="line">  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;拨号资源已分配完成(<span class="variable">$back_file</span>)&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell实用脚本</title>
      <link href="/post/002.html"/>
      <url>/post/002.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、shell实现100台服务器的公钥的批量分发；"><a href="#一、shell实现100台服务器的公钥的批量分发；" class="headerlink" title="一、shell实现100台服务器的公钥的批量分发；"></a>一、shell实现100台服务器的公钥的批量分发；</h1><p>LLD规划：100台服务器ip为：192.168.42.101-201，root密码：123456<br><strong>考虑因素：</strong><br>1.如何创建秘钥<br>2.检查与服务器之间的通讯<br>3.分发秘钥</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">[root@backup ~]# cat keypir.sh </span></span><br><span class="line"><span class="language-xml">#!/bin/bash</span></span><br><span class="line"><span class="language-xml">password=123456</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">#创建秘钥对---(ssh-keygen),写入指定文件</span></span><br><span class="line"><span class="language-xml">CreateKeyPair()&#123;                         </span></span><br><span class="line"><span class="language-xml">ssh-keygen -f /root/.ssh/id_rsa -P &quot;&quot;    #-P:创建的秘钥是否设置密码，此处不设置密码。</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">#检查100台服务器网络是否畅通</span></span><br><span class="line"><span class="language-xml">CHECK()&#123;                                 </span></span><br><span class="line"><span class="language-xml">ping -c 1 192.168.42.$i &amp;&gt;/dev/null</span></span><br><span class="line"><span class="language-xml">if [ $? -eq 0 ]                          #$? 返回为0时，说明网络畅通</span></span><br><span class="line"><span class="language-xml">then</span></span><br><span class="line"><span class="language-xml">return 1</span></span><br><span class="line"><span class="language-xml">else</span></span><br><span class="line"><span class="language-xml">return 0</span></span><br><span class="line"><span class="language-xml">fi</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">#分发秘钥</span></span><br><span class="line"><span class="language-xml">TRACE()&#123;</span></span><br><span class="line"><span class="language-xml">which sshpass &amp;&gt;/dev/null     #确定sshpass是否安装，对方服务器可能没有安装</span></span><br><span class="line"><span class="language-xml">if [ $? -ne 0 ]               #通过which命令判断sshpass是否安装，安装了echo $?则返回0</span></span><br><span class="line"><span class="language-xml">then                          #$?不为0时，则说明没有安装</span></span><br><span class="line"><span class="language-xml">yum install sshpass -y</span></span><br><span class="line"><span class="language-xml">#sshpass -p $password ssh-copy-id -o StrictKeyHostChecking  192.168.42.$i</span></span><br><span class="line"><span class="language-xml">sshpass -p $password scp -p -o StrictHostKeyChecking=no /root/.ssh/id_rsa.pub 192.168.42.$i:/tmp/               </span></span><br><span class="line"><span class="language-xml"> #使用sshpass工具和-o参数实现避免交互输入yes和密码</span></span><br><span class="line"><span class="language-xml"> #将本地/root/.ssh/id_rsa.pub（生成的秘钥文件），传输到对应服务器上/tmp/目录下，此时不能直接传到/root/.ssh目录下，避免其他机器同样操作覆盖文件。</span></span><br><span class="line"><span class="language-xml">sshpass -p $password ssh -o StrictHostKeyChecking=no 192.168.42.$i &quot;cat /tmp/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys&quot;           </span></span><br><span class="line"><span class="language-xml">#ssh连接服务器，将/tmp/下密码文件写如入/root/.ssh/authorized_keys</span></span><br><span class="line"><span class="language-xml">sshpass -p $password ssh -o StrictHostKeyChecking=no 192.168.42.$i &quot;chmod 600 /root/.ssh/authorized_keys&quot;           #修改文件权限</span></span><br><span class="line"><span class="language-xml">sshpass -p $password ssh -o StrictHostKeyChecking=no 192.168.42.$i &quot;rm -rf /tmp/id_rsa.pub&quot;                      #由于是秘钥文件，为了安全起见，用完删除</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">else                                  #如果sshpass工具安装，则直接执行。</span></span><br><span class="line"><span class="language-xml">#sshpass -p $password ssh-copy-id 192.168.42.$i</span></span><br><span class="line"><span class="language-xml">sshpass -p $password scp -p -o StrictHostKeyChecking=no /root/.ssh/id_rsa.pub 192.168.42.$i:/tmp/</span></span><br><span class="line"><span class="language-xml">sshpass -p $password ssh -o StrictHostKeyChecking=no 192.168.42.$i &quot;cat /tmp/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys&quot; </span></span><br><span class="line"><span class="language-xml">sshpass -p $password ssh -o StrictHostKeyChecking=no 192.168.42.$i &quot;chmod 600 /root/.ssh/authorized_keys&quot;</span></span><br><span class="line"><span class="language-xml">sshpass -p $password ssh -o StrictHostKeyChecking=no 192.168.42.$i &quot;rm -rf /tmp/id_rsa.pub&quot;</span></span><br><span class="line"><span class="language-xml">fi</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">#主函数，调用上方定义的函数，实现功能</span></span><br><span class="line"><span class="language-xml">MAIN()&#123;                </span></span><br><span class="line"><span class="language-xml">for i in &#123;101..201&#125;</span></span><br><span class="line"><span class="language-xml">do</span></span><br><span class="line"><span class="language-xml">CHECK</span></span><br><span class="line"><span class="language-xml">if [ $? -eq 1 ]                     #调用CHECK检查网络是否畅通，return=1时（畅通）</span></span><br><span class="line"><span class="language-xml">then</span></span><br><span class="line"><span class="language-xml">    if [ -f /root/.ssh/id_rsa.pub ]  #畅通的话，检查秘钥文件是否存在</span></span><br><span class="line"><span class="language-xml">    then</span></span><br><span class="line"><span class="language-xml">       TRACE                         #执行TRACE函数，分发秘钥</span></span><br><span class="line"><span class="language-xml">    else</span></span><br><span class="line"><span class="language-xml">       CreateKeyPair                  #创建秘钥</span></span><br><span class="line"><span class="language-xml">       TRACE                          #分发秘钥</span></span><br><span class="line"><span class="language-xml">    fi</span></span><br><span class="line"><span class="language-xml">else                  #不通时</span></span><br><span class="line"><span class="language-xml">echo &quot; 192.168.42.$i is unreachable...&quot;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fi</span></span><br><span class="line"><span class="language-xml">done </span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">MAIN</span></span><br></pre></td></tr></table></figure><h1 id="二、设计一个shell-程序；"><a href="#二、设计一个shell-程序；" class="headerlink" title="二、设计一个shell 程序；"></a>二、设计一个shell 程序；</h1><p>要求在每天凌晨压缩打包&#x2F;etc 目录下的所有内容，存放在&#x2F;root&#x2F;bak 目录里，且文件名为如下形式yymmdd_etc.tar.gz(yy为年，mm为月，dd为日),该目录保存7天内容；每天凌晨3点增量同步到备份服务器&#x2F;backup目录下，每周六凌晨3点全量同步到备份服务的&#x2F;backup目录下；备份服务器&#x2F;backup下保留一个月的备份文件。<br><strong>考虑因素：</strong><br>       （1）打包&#x2F;etc目录,并存放在&#x2F;root&#x2F;bak目录里，按要求命名。<br>         (2) &#x2F;root&#x2F;backup中只保存7天内容。<br>      （3）增量备份，全量备份。<br>        (4)备份服务器保存一个月文件。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">#!/bin/bash</span></span><br><span class="line"><span class="language-xml">#定义变量</span></span><br><span class="line"><span class="language-xml">back_file_name=`date +%Y%m%d`.tar.gz     //文件名</span></span><br><span class="line"><span class="language-xml">back_file_dir=/root/bak                  //压缩打包路径</span></span><br><span class="line"><span class="language-xml">backup_server_user=rsync_backup //备份服务器用户</span></span><br><span class="line"><span class="language-xml">backup_server_pass=123456 //备份服务器密码</span></span><br><span class="line"><span class="language-xml">root_pass=123456 //备份主机root密码</span></span><br><span class="line"><span class="language-xml">backup_server_IP=192.168.42.159 //备份服务器IP</span></span><br><span class="line"><span class="language-xml">mail_owner=ljwenjie66@163.com //邮箱地址</span></span><br><span class="line"><span class="language-xml">mail_topic=&quot;web data backup&quot;// </span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">data_tar()&#123;                                           #定义用于压缩函数</span></span><br><span class="line"><span class="language-xml">    [ -d $back_file_dir ] || mkdir -p $back_file_dir  #判断/root/bak备份的目录是否存在，不存在就创建。</span></span><br><span class="line"><span class="language-xml">    tar -czf $back_file_dir/$back_file_name /etc/*    #将/etc下所有内容进行打包/root/bak/下以时间命名。</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">data_trace()&#123;                                         #进行增量备份</span></span><br><span class="line"><span class="language-xml">rsync -avz $back_file_dir $backup_server_user@$backup_server_IP::backup --password-file=/etc/rsync.password</span></span><br><span class="line"><span class="language-xml">&#125;       #rsync将本地/root/bak新增的文件备份到备份主机上</span></span><br><span class="line"><span class="language-xml">        #--password-file中存储了rsync的密码，避免了交互输入密码</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">data_trace_all()&#123;    #实现全量备份</span></span><br><span class="line"><span class="language-xml">    sshpass -p $root_pass scp -o StrictHostKeyChecking=no -rp $back_file_dir/* root@192.168.42.159:/backup</span></span><br><span class="line"><span class="language-xml">#sshappss -p 123456 scp -rp $back_file_dir root@192.168.42.138:/backup/</span></span><br><span class="line"><span class="language-xml">&#125;        #sshpass工具实现了自动输入密码</span></span><br><span class="line"><span class="language-xml">         #-o StrictHostKeyChecking参数实现了自动输入yes or no，避免了人机交互</span></span><br><span class="line"><span class="language-xml">         #利用scp将/root/bak下所有内容进行备份，以root身份备份到对应主机的/backup目录下</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">clean_over_localdata()&#123;   #清除本地7天前的的所有文件</span></span><br><span class="line"><span class="language-xml">    find $back_file_dir -mtime +7 -exec rm &#123;&#125; -rf \;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">clean_over_remodata()&#123; #利用ssh连接备份服务器，将服务器中一个月之前的文件删除</span></span><br><span class="line"><span class="language-xml">    sshpass -p $backup_server_pass ssh -o StrictHostKeyChecking=no $backup_server_IP &quot;find /backup/ -mtime +30 -exec rm &#123;&#125; -rf \;&quot;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">case $1 in</span></span><br><span class="line"><span class="language-xml">    data_tar)</span></span><br><span class="line"><span class="language-xml">        data_tar</span></span><br><span class="line"><span class="language-xml">        ;;</span></span><br><span class="line"><span class="language-xml">    trace_all)</span></span><br><span class="line"><span class="language-xml">        data_trace_all</span></span><br><span class="line"><span class="language-xml">        ;;</span></span><br><span class="line"><span class="language-xml">    data_trace)</span></span><br><span class="line"><span class="language-xml">        data_trace</span></span><br><span class="line"><span class="language-xml">        ;;</span></span><br><span class="line"><span class="language-xml">    clean_over_localdata)</span></span><br><span class="line"><span class="language-xml">        clean_over_lcoaldata</span></span><br><span class="line"><span class="language-xml">        ;;</span></span><br><span class="line"><span class="language-xml">    clean_remodata)</span></span><br><span class="line"><span class="language-xml">        clean_over_remodata</span></span><br><span class="line"><span class="language-xml">        ;;</span></span><br><span class="line"><span class="language-xml">    *)</span></span><br><span class="line"><span class="language-xml">        echo &quot;please input true paramater...&quot;   #如果输入的不是有效参数，则输出*</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">esac</span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure><h1 id="三、shell开发运维管理工具。"><a href="#三、shell开发运维管理工具。" class="headerlink" title="三、shell开发运维管理工具。"></a>三、shell开发运维管理工具。</h1><p>要求：用户交互，当用户输入菜单号时，打印相关内容。<br>菜单<br>1.磁盘分区<br>2.CPU负载<br>3.剩余内存<br>4.退出<br>输入：1<br>输出：（主机名，系统版本，分区情况）<br>    hostname:<br>    system:系统版本<br>    ———分区一———–（分区变量输出）<br>    path：分区一<br>    size：大小<br>    file_os:分区文件系统类型<br>    mount_on：分区挂载点<br>    ———-分区二———-<br>    path：分区二<br>    size：大小<br>    file_os:分区文件系统类型<br>    mount_on：分区挂载点<br>输入：2<br>输出：<br>1分钟平均负载：<br>5分钟平均负载：<br>15分钟平均负载：<br>输入：3<br>输出：<br>目前可用内存：<br>可用Swap分区：<br>输入：4<br>输出：<br>Bey…</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">#!/bin/bash</span></span><br><span class="line"><span class="language-xml">while true</span></span><br><span class="line"><span class="language-xml">do</span></span><br><span class="line"><span class="language-xml">#格式化输出以下菜单</span></span><br><span class="line"><span class="language-xml">cat &lt;<span class="tag">&lt;<span class="name">EOF</span>        </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">-------------------菜单---------------------</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">-</span>              <span class="attr">1.查看磁盘分区</span>              <span class="attr">-</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">-</span>              <span class="attr">2.CPU负载</span>                   <span class="attr">-</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">-</span>              <span class="attr">3.剩余内存</span>                  <span class="attr">-</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">-</span>              <span class="attr">4.退出</span>                      <span class="attr">-</span>  </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">--------------------------------------------</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">EOF</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">#<span class="attr">接受用户输入的一个值</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">read</span> <span class="attr">-p</span> &quot;<span class="attr">请输入你要执行的操作</span>：&gt;</span>&gt;&gt;&quot; num</span></span><br><span class="line"><span class="language-xml">#实现第一个功能：查看磁盘分区</span></span><br><span class="line"><span class="language-xml">PART()&#123;               </span></span><br><span class="line"><span class="language-xml">  echo &quot;hostname:$HOSTNAME&quot;                            #获取主机名</span></span><br><span class="line"><span class="language-xml">  echo &quot;system: `cat /etc/redhat-release`&quot;             #获取系统内核版本</span></span><br><span class="line"><span class="language-xml">  #定义数组，获取磁盘分区放入其中。</span></span><br><span class="line"><span class="language-xml">  array1=(`lsblk -l |awk &#x27;/sd[a-z][0-9]/&#123;print $1&#125;&#x27;`)  #磁盘名</span></span><br><span class="line"><span class="language-xml">  array2=(`lsblk -l |awk &#x27;/sd[a-z][0-9]/&#123;print $4&#125;&#x27;`)  #大小</span></span><br><span class="line"><span class="language-xml">  array3=(`lsblk -l |awk &#x27;/sd[a-z][0-9]/&#123;print $6&#125;&#x27;`)  #类型</span></span><br><span class="line"><span class="language-xml">  array4=(`lsblk -l |awk &#x27;/sd[a-z][0-9]/&#123;print $7&#125;&#x27;`)  #挂载点</span></span><br><span class="line"><span class="language-xml">  #遍历数组</span></span><br><span class="line"><span class="language-xml">  num=`echo $(($&#123;#array1[@]&#125;-1))`  #获取数组长度-1的值，给num（这里是3）</span></span><br><span class="line"><span class="language-xml">  for i in `seq 0 $num`            #i:0-3</span></span><br><span class="line"><span class="language-xml">  do</span></span><br><span class="line"><span class="language-xml"> #循环输出数组1中0到3位置值</span></span><br><span class="line"><span class="language-xml">cat &lt;<span class="tag">&lt;<span class="name">EOF</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                   <span class="attr">---------</span>$&#123;<span class="attr">array1</span>[$<span class="attr">i</span>]&#125;<span class="attr">-----------</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">path:</span> $&#123;<span class="attr">array1</span>[$<span class="attr">i</span>]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">size:</span> $&#123;<span class="attr">array2</span>[$<span class="attr">i</span>]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">file_os:</span> $&#123;<span class="attr">array3</span>[$<span class="attr">i</span>]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">mount_on</span>：$&#123;<span class="attr">array4</span>[$<span class="attr">i</span>]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">EOF</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">done</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">#<span class="attr">实现第二个功能</span>：<span class="attr">查看cpu负载</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">LOADING</span>()&#123;                          #<span class="attr">通过uptime命令</span>，<span class="attr">和awk</span>,<span class="attr">获取平均负载</span>。</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">uptime</span> |<span class="attr">awk</span> <span class="attr">-F</span> [<span class="attr">:</span>,] &#x27;&#123;<span class="attr">print</span> &quot;<span class="attr">一分钟平均负载:</span>&quot;,$(<span class="attr">NF-2</span>)&quot;\<span class="attr">n</span>&quot;&quot;<span class="attr">五分钟平均分在:</span>&quot;,$(<span class="attr">NF-1</span>)&quot;\<span class="attr">n</span>&quot;&quot;<span class="attr">十五分钟平均负载:</span>&quot;,$<span class="attr">NF</span>&#125;&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&#125;                                  #$<span class="attr">NF:从最后一列开始取</span>。</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">#<span class="attr">实现第三个功能</span>：<span class="attr">查看内存和swap</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">MEM</span>()&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">var</span>=<span class="string">(</span>&quot;<span class="attr">目前可用内存:</span>&quot; &quot;<span class="attr">可用swap分区:</span>&quot;)</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">n</span>=<span class="string">0</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">for</span> <span class="attr">i</span> <span class="attr">in</span> `<span class="attr">free</span> <span class="attr">-h</span> |<span class="attr">awk</span> &#x27;/^[^[<span class="attr">:space:</span>]]/ &#123;<span class="attr">print</span> $<span class="attr">4</span>&#125;&#x27;`    #<span class="attr">取出内存和swap</span>,<span class="attr">进行遍历</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">do</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">echo</span> $&#123;<span class="attr">var</span>[$<span class="attr">n</span>]&#125; $<span class="attr">i</span>            #<span class="attr">为满足题目要求</span>，（<span class="attr">说明</span>+<span class="attr">内容</span>），<span class="attr">将说明放入数组依次输出</span>+<span class="attr">内容</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">let</span> <span class="attr">n</span>++                       #<span class="attr">n从0开始自加</span>，<span class="attr">实现数组依次输出</span>。</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">done</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">#<span class="attr">利用case语句捕获用户键入的值</span>。</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">#<span class="attr">模式匹配成功</span>，<span class="attr">则执行相应函数</span>。</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">case</span> $<span class="attr">num</span> <span class="attr">in</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   <span class="attr">1</span>)        </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   <span class="attr">PART</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   ;;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   <span class="attr">2</span>)</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   <span class="attr">LOADING</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   ;;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   <span class="attr">3</span>)</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   <span class="attr">MEM</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   ;;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   <span class="attr">4</span>)</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   <span class="attr">exit</span> <span class="attr">0</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   ;;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   *)</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   <span class="attr">echo</span> &quot;<span class="attr">please</span> <span class="attr">input</span> <span class="attr">true</span> <span class="attr">list...</span>&quot;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">esac</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">done</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"></span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LVS小记</title>
      <link href="/post/001.html"/>
      <url>/post/001.html</url>
      
        <content type="html"><![CDATA[<h1 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h1><h2 id="keepalived配置文件参考"><a href="#keepalived配置文件参考" class="headerlink" title="keepalived配置文件参考"></a>keepalived配置文件参考</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[getui@bjmjq-service-10-9 ~]$ <span class="built_in">cat</span> /etc/keepalived/keepalived.conf </span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id bjmjqWeb</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP              <span class="comment">#指定keepalived的角色，MASTER表示此主机是主服务器，BACKUP表示此主机是备用服务器</span></span><br><span class="line">    interface  bond0    <span class="comment">#指定HA监测网络的接口</span></span><br><span class="line">    virtual_router_id 119      <span class="comment">#虚拟路由标识，这个标识是一个数字，同一个vrrp实例使用唯一的标识。即同一vrrp_instance下，MASTER和BACKUP必须是一致的</span></span><br><span class="line">    priority 90              <span class="comment">#定义优先级，数字越大，优先级越高，在同一个vrrp_instance下，MASTER的优先级必须大于BACKUP的优先级</span></span><br><span class="line">    advert_int 1              <span class="comment">#设定MASTER与BACKUP负载均衡器之间同步检查的时间间隔，单位是秒</span></span><br><span class="line">    authentication &#123;          <span class="comment">#设置验证类型和密码</span></span><br><span class="line">        auth_type PASS        <span class="comment">#设置验证类型，主要有PASS和AH两种</span></span><br><span class="line">        auth_pass mimazaizhe        <span class="comment">#设置验证密码，在同一个vrrp_instance下，MASTER与BACKUP必须使用相同的密码才能正常通信</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;       <span class="comment">#设置虚拟IP地址，可以设置多个虚拟IP地址，每行一个</span></span><br><span class="line">        10.16.10.248</span><br><span class="line">        10.16.10.249</span><br><span class="line">10.16.10.247</span><br><span class="line">10.16.10.246</span><br><span class="line">10.16.10.244</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 10.16.10.248 80 &#123;     <span class="comment">#设置虚拟服务器，需要指定虚拟IP地址和服务端口，IP与端口之间用空格隔开</span></span><br><span class="line">    delay_loop 6                        <span class="comment">#设置运行情况检查时间，单位是秒</span></span><br><span class="line">    lb_algo wlc                          <span class="comment">#设置负载调度算法，这里设置为rr，即轮询算法</span></span><br><span class="line">    lb_kind DR                          <span class="comment">#设置LVS实现负载均衡的机制，有NAT、TUN、DR三个模式可选</span></span><br><span class="line">    nat_mask 255.255.255.0</span><br><span class="line">    persistence_timeout 0               <span class="comment">#会话保持时间，单位是秒。这个选项对动态网页是非常有用的，为集群系统中的session共享提供了一个很好的解决方案。</span></span><br><span class="line">                                        <span class="comment">#有了这个会话保持功能，用户的请求会被一直分发到某个服务节点，直到超过这个会话的保持时间。</span></span><br><span class="line">                                        <span class="comment">#需要注意的是，这个会话保持时间是最大无响应超时时间，也就是说，用户在操作动态页面时，如果50秒内没有执行任何操作</span></span><br><span class="line">                                        <span class="comment">#那么接下来的操作会被分发到另外的节点，但是如果用户一直在操作动态页面，则不受50秒的时间限制</span></span><br><span class="line">    protocol TCP                        <span class="comment">#指定转发协议类型，有TCP和UDP两种</span></span><br><span class="line"></span><br><span class="line">    real_server 10.16.10.2 80 &#123;     <span class="comment">#配置服务节点1，需要指定real server的真实IP地址和端口，IP与端口之间用空格隔开</span></span><br><span class="line">        weight 1                        <span class="comment">#配置服务节点的权值，权值大小用数字表示，数字越大，权值越高，设置权值大小可以为不同性能的服务器</span></span><br><span class="line">                                        <span class="comment">#分配不同的负载，可以为性能高的服务器设置较高的权值，而为性能较低的服务器设置相对较低的权值，这样才能合理地利用和分配系统资源</span></span><br><span class="line">        TCP_CHECK &#123;                     <span class="comment">#realserver的状态检测设置部分，单位是秒</span></span><br><span class="line">            connect_timeout 3           <span class="comment">#表示3秒无响应超时</span></span><br><span class="line">            nb_get_retry 3              <span class="comment">#表示重试次数</span></span><br><span class="line">            delay_before_retry 3        <span class="comment">#表示重试间隔</span></span><br><span class="line">            connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="选举策略"><a href="#选举策略" class="headerlink" title="选举策略"></a>选举策略</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、keepalived集群中MASTER和BACKUP角色选举策略：</span><br><span class="line">  在keepalived集群中，其实并没有严格意义上的主备节点，虽然可以在配置文件中设置MASTER状态，但是这并不意味着此节点一直就是MASTER状态。控制节点角色的是配置文件中的priority值，但它并不控制所有节点的角色，另一个能改变角色的是在vrrp_script模块中设置的weight值，这两个选项的值嗾使整数值(weight可以为负整数)，一个节点在集群中的角色就是通过这两个值的大小决定的；在vrrp_script模块中，如果不设置weight的值，那么集群优先级的选择将由配置文件中的priority值决定；</span><br><span class="line"></span><br><span class="line">2、使用vrrp_script模块时集群角色的选举算法</span><br><span class="line"></span><br><span class="line">（1）weight值为正数时</span><br><span class="line">在vrrp_script中指定的脚本如果检测成功，那么MASTER节点的权值将是weight值与priority值之和；如果检测失败，那么MASTER节点的权值保持为priority值，因此，切换策略为：</span><br><span class="line"></span><br><span class="line">    MASTER节点vrrp_script脚本检测失败时，如果MASTER节点priority值小于BACKUP节点weight值与priority值之和，将发生主备切换；</span><br><span class="line">    MASTER节点vrrp_script脚本检测成功时，如果MASTER节点weight值与priority之和大于BACKUP节点weight值与priority值之和，主节点依然为主节点，不发生切换；</span><br><span class="line"></span><br><span class="line">（2）weight值为负数时</span><br><span class="line">在vrrp_script中指定的脚本如果检测成功，那么MASTER节点的权值仍是priority值；如果检测失败，那么MASTER节点的权值将是priority值与weight值之差，因此，切换策略为：</span><br><span class="line"></span><br><span class="line">    MASTER节点vrrp_script脚本检测失败时，如果MASTER节点priority值与weight值之差小于BACKUP节点的priority值，将发生主备切换；</span><br><span class="line">    MASTER节点vrrp_script脚本检测成功时，如果MASTER节点priority值大于BACKUP节点priority值时，主节点依然为主节点，不发生切换；</span><br></pre></td></tr></table></figure><h3 id="LVS-nginx-keepalived搭建详情"><a href="#LVS-nginx-keepalived搭建详情" class="headerlink" title="LVS+nginx+keepalived搭建详情"></a><a href="https://blog.csdn.net/weixin_45405982/article/details/122905763?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170079241816800182179868%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170079241816800182179868&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-16-122905763-null-null.142%5Ev96%5Epc_search_result_base7&utm_term=lvs%20keepalived%20nginx%E6%90%AD%E5%BB%BA&spm=1018.2226.3001.4187">LVS+nginx+keepalived搭建详情</a></h3><h3 id="ipvsadm命令详解"><a href="#ipvsadm命令详解" class="headerlink" title="ipvsadm命令详解"></a>ipvsadm命令详解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ipvsadm -Ln --rate  显示状态以及每个后端服务器的连接速率</span></span><br><span class="line">Prot LocalAddress:Port                 CPS    InPPS   OutPPS    InBPS   OutBPS</span><br><span class="line">  -&gt; RemoteAddress:Port</span><br><span class="line">TCP  10.10.14.248:5266                   4     2182        0  4925261        0</span><br><span class="line">  -&gt; 10.10.14.8:5266                     0      102        0   171532        0</span><br><span class="line">  -&gt; 10.10.14.9:5266                     0      529        0  1183525        0</span><br><span class="line">  -&gt; 10.10.14.12:5266                    0     1034        0  2654307        0</span><br><span class="line">  每个后端服务器的连接速率：</span><br><span class="line">Prot：协议类型（这里是 TCP）。</span><br><span class="line">LocalAddress:Port：本地监听地址和端口。</span><br><span class="line">CPS：每秒连接数（Connections Per Second）</span><br><span class="line">InPPS：每秒接收数据包数（Incoming Packets Per Second）</span><br><span class="line">OutPPS：每秒发送数据包数（Outgoing Packets Per Second）</span><br><span class="line">InBPS：每秒接收字节数（Incoming Bytes Per Second）</span><br><span class="line">OutBPS：每秒发送字节数（Outgoing Bytes Per Second）</span><br><span class="line"><span class="comment"># ipvsadm -Ln --stats  统计信息</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=1048576)</span><br><span class="line">Prot LocalAddress:Port               Conns   InPkts  OutPkts  InBytes OutBytes</span><br><span class="line">  -&gt; RemoteAddress:Port</span><br><span class="line">TCP  10.10.14.248:5266              110476 24749746        0   42308M        0</span><br><span class="line">  -&gt; 10.10.14.8:5266                     0  2179689        0    3403M        0</span><br><span class="line">  -&gt; 10.10.14.9:5266                    11  6132329        0   10738M        0</span><br><span class="line">  -&gt; 10.10.14.12:5266                    0  8691689        0   17337M        0</span><br><span class="line">  -&gt; 10.10.14.25:5266                   11  4839854        0    7719M        0</span><br><span class="line">  -&gt; 10.10.14.27:5266                37694   934186        0  999095K        0</span><br><span class="line">  -&gt; 10.10.14.28:5266                50412  1414498        0    1552M        0</span><br><span class="line">  -&gt; 10.10.14.29:5266                22370   558285        0  557957K        0</span><br><span class="line"><span class="comment">#统计信息 (--stats)：</span></span><br><span class="line">Conns：连接数，表示当前连接到该服务的连接数总和。</span><br><span class="line">InPkts：接收的数据包数量总和。</span><br><span class="line">OutPkts：发送的数据包数量总和。</span><br><span class="line">InBytes：接收的字节数总和。</span><br><span class="line">OutBytes：发送的字节数总和。</span><br><span class="line"></span><br><span class="line"><span class="comment">#ipvsadm -Ln  当前情况</span></span><br></pre></td></tr></table></figure><h3 id="lvs中ipvsadm的ActiveConn和InActConn的深入理解"><a href="#lvs中ipvsadm的ActiveConn和InActConn的深入理解" class="headerlink" title="lvs中ipvsadm的ActiveConn和InActConn的深入理解"></a>lvs中ipvsadm的ActiveConn和InActConn的深入理解</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ActiveConn是活动连接数,也就是tcp连接状态的ESTABLISHED;InActConn是指除了ESTABLISHED以外的,所有的其它状态的tcp连接.那既然这样,为什么从lvs里看的ActiveConn会比在真实机上通过netstats看到的ESTABLISHED高很多呢?问得好!这也是笔者一直迷惑而渐渐清晰的一个问题.原来lvs自身也有一个默认超时时间.可以用ipvsadm -L --timeout查看,默认是900 120 300,分别是TCP TCPFIN UDP的时间.也就是说一条tcp的连接经过lvs后,lvs会把这台记录保存15分钟,而不管这条连接是不是已经失效!所以如果你的服务器在15分钟以内有大量的并发请求连进来的时候,你就会看到这个数值直线上升.</span><br><span class="line">其实很多时候,我们看lvs的这个连接数是想知道现在的每台机器的真实连接数吧?怎么样做到这一点呢?其实知道现在的ActiveConn是怎样产生的,做到这一点就简单了.举个例子:比如你的lvs是用来负载网站,用的模式是dr,后台的web server用的nginx.这时候一条请求过来,在程序没有问题的情况下,一条连接最多也就五秒就断开了.这时候你可以这样设置:ipvsadm --set 5 10 300.设置tcp连接只保持5秒中.如果现在ActiveConn很高你会发现这个数值会很快降下来,直到降到和你用nginx的status看当前连接数的时候差不多.你可以继续增加或者减小5这个数值,直到真实机的status连接数和lvs里的ActiveConn一致.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> LVS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
